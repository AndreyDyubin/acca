// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/invoice.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type NewInvoiceRequest struct {
	// key внешний уникальный идентицитора инвойса.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// status состояние инвойса.
	Status InvoiceStatus `protobuf:"varint,2,opt,name=status,proto3,enum=api.InvoiceStatus" json:"status,omitempty"`
	// strategy стратегия работы с инвойсом.
	Strategy             string   `protobuf:"bytes,3,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Meta                 *[]byte  `protobuf:"bytes,4,opt,name=meta,proto3,wktptr" json:"meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewInvoiceRequest) Reset()         { *m = NewInvoiceRequest{} }
func (m *NewInvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*NewInvoiceRequest) ProtoMessage()    {}
func (*NewInvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cb5cd525462a080, []int{0}
}
func (m *NewInvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewInvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewInvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewInvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewInvoiceRequest.Merge(m, src)
}
func (m *NewInvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewInvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewInvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewInvoiceRequest proto.InternalMessageInfo

func (m *NewInvoiceRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *NewInvoiceRequest) GetStatus() InvoiceStatus {
	if m != nil {
		return m.Status
	}
	return InvoiceStatus_UNKNOWN_I
}

func (m *NewInvoiceRequest) GetStrategy() string {
	if m != nil {
		return m.Strategy
	}
	return ""
}

func (m *NewInvoiceRequest) GetMeta() *[]byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

type NewInvoiceResponse struct {
	InvoiceId            int64    `protobuf:"varint,1,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewInvoiceResponse) Reset()         { *m = NewInvoiceResponse{} }
func (m *NewInvoiceResponse) String() string { return proto.CompactTextString(m) }
func (*NewInvoiceResponse) ProtoMessage()    {}
func (*NewInvoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cb5cd525462a080, []int{1}
}
func (m *NewInvoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewInvoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewInvoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewInvoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewInvoiceResponse.Merge(m, src)
}
func (m *NewInvoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewInvoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewInvoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewInvoiceResponse proto.InternalMessageInfo

func (m *NewInvoiceResponse) GetInvoiceId() int64 {
	if m != nil {
		return m.InvoiceId
	}
	return 0
}

type GetInvoiceByIDRequest struct {
	InvoiceId            int64    `protobuf:"varint,1,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInvoiceByIDRequest) Reset()         { *m = GetInvoiceByIDRequest{} }
func (m *GetInvoiceByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetInvoiceByIDRequest) ProtoMessage()    {}
func (*GetInvoiceByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cb5cd525462a080, []int{2}
}
func (m *GetInvoiceByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInvoiceByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInvoiceByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInvoiceByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInvoiceByIDRequest.Merge(m, src)
}
func (m *GetInvoiceByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetInvoiceByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInvoiceByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetInvoiceByIDRequest proto.InternalMessageInfo

func (m *GetInvoiceByIDRequest) GetInvoiceId() int64 {
	if m != nil {
		return m.InvoiceId
	}
	return 0
}

type GetInvoiceByIDResponse struct {
	Invoice              *Invoice `protobuf:"bytes,1,opt,name=invoice,proto3" json:"invoice,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInvoiceByIDResponse) Reset()         { *m = GetInvoiceByIDResponse{} }
func (m *GetInvoiceByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetInvoiceByIDResponse) ProtoMessage()    {}
func (*GetInvoiceByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cb5cd525462a080, []int{3}
}
func (m *GetInvoiceByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInvoiceByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInvoiceByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInvoiceByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInvoiceByIDResponse.Merge(m, src)
}
func (m *GetInvoiceByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetInvoiceByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInvoiceByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetInvoiceByIDResponse proto.InternalMessageInfo

func (m *GetInvoiceByIDResponse) GetInvoice() *Invoice {
	if m != nil {
		return m.Invoice
	}
	return nil
}

type AddTransactionToInvoiceRequest struct {
	// invoice_id связанный с транзакцией инвойс.
	InvoiceId int64 `protobuf:"varint,1,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	// key Уникальный внешний идентификатор транзакции (опционально).
	Key *string `protobuf:"bytes,2,opt,name=key,proto3,wktptr" json:"key,omitempty"`
	// strategy стратегия работы с инвойсом.
	Strategy             string   `protobuf:"bytes,3,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Meta                 *[]byte  `protobuf:"bytes,4,opt,name=meta,proto3,wktptr" json:"meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddTransactionToInvoiceRequest) Reset()         { *m = AddTransactionToInvoiceRequest{} }
func (m *AddTransactionToInvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*AddTransactionToInvoiceRequest) ProtoMessage()    {}
func (*AddTransactionToInvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cb5cd525462a080, []int{4}
}
func (m *AddTransactionToInvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddTransactionToInvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddTransactionToInvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddTransactionToInvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTransactionToInvoiceRequest.Merge(m, src)
}
func (m *AddTransactionToInvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddTransactionToInvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTransactionToInvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddTransactionToInvoiceRequest proto.InternalMessageInfo

func (m *AddTransactionToInvoiceRequest) GetInvoiceId() int64 {
	if m != nil {
		return m.InvoiceId
	}
	return 0
}

func (m *AddTransactionToInvoiceRequest) GetKey() *string {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *AddTransactionToInvoiceRequest) GetStrategy() string {
	if m != nil {
		return m.Strategy
	}
	return ""
}

func (m *AddTransactionToInvoiceRequest) GetMeta() *[]byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

type AddTransactionToInvoiceResponse struct {
	TxId                 int64    `protobuf:"varint,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddTransactionToInvoiceResponse) Reset()         { *m = AddTransactionToInvoiceResponse{} }
func (m *AddTransactionToInvoiceResponse) String() string { return proto.CompactTextString(m) }
func (*AddTransactionToInvoiceResponse) ProtoMessage()    {}
func (*AddTransactionToInvoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cb5cd525462a080, []int{5}
}
func (m *AddTransactionToInvoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddTransactionToInvoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddTransactionToInvoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddTransactionToInvoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTransactionToInvoiceResponse.Merge(m, src)
}
func (m *AddTransactionToInvoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddTransactionToInvoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTransactionToInvoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddTransactionToInvoiceResponse proto.InternalMessageInfo

func (m *AddTransactionToInvoiceResponse) GetTxId() int64 {
	if m != nil {
		return m.TxId
	}
	return 0
}

type GetTransactionByIDRequest struct {
	TxId                 int64    `protobuf:"varint,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTransactionByIDRequest) Reset()         { *m = GetTransactionByIDRequest{} }
func (m *GetTransactionByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransactionByIDRequest) ProtoMessage()    {}
func (*GetTransactionByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cb5cd525462a080, []int{6}
}
func (m *GetTransactionByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTransactionByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTransactionByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTransactionByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionByIDRequest.Merge(m, src)
}
func (m *GetTransactionByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTransactionByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionByIDRequest proto.InternalMessageInfo

func (m *GetTransactionByIDRequest) GetTxId() int64 {
	if m != nil {
		return m.TxId
	}
	return 0
}

type GetTransactionByIDResponse struct {
	Tx                   *Tx      `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTransactionByIDResponse) Reset()         { *m = GetTransactionByIDResponse{} }
func (m *GetTransactionByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetTransactionByIDResponse) ProtoMessage()    {}
func (*GetTransactionByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cb5cd525462a080, []int{7}
}
func (m *GetTransactionByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTransactionByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTransactionByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTransactionByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionByIDResponse.Merge(m, src)
}
func (m *GetTransactionByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTransactionByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionByIDResponse proto.InternalMessageInfo

func (m *GetTransactionByIDResponse) GetTx() *Tx {
	if m != nil {
		return m.Tx
	}
	return nil
}

type AddOperationToTxRequest struct {
	TxId                 int64        `protobuf:"varint,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	SrcAccId             int64        `protobuf:"varint,3,opt,name=src_acc_id,json=srcAccId,proto3" json:"src_acc_id,omitempty"`
	DstAccId             int64        `protobuf:"varint,4,opt,name=dst_acc_id,json=dstAccId,proto3" json:"dst_acc_id,omitempty"`
	Strategy             OperStrategy `protobuf:"varint,5,opt,name=strategy,proto3,enum=api.OperStrategy" json:"strategy,omitempty"`
	Amount               int64        `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Reason               string       `protobuf:"bytes,7,opt,name=reason,proto3" json:"reason,omitempty"`
	Meta                 *[]byte      `protobuf:"bytes,8,opt,name=meta,proto3,wktptr" json:"meta,omitempty"`
	Hold                 bool         `protobuf:"varint,9,opt,name=hold,proto3" json:"hold,omitempty"`
	HoldAccId            int64        `protobuf:"varint,10,opt,name=hold_acc_id,json=holdAccId,proto3" json:"hold_acc_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AddOperationToTxRequest) Reset()         { *m = AddOperationToTxRequest{} }
func (m *AddOperationToTxRequest) String() string { return proto.CompactTextString(m) }
func (*AddOperationToTxRequest) ProtoMessage()    {}
func (*AddOperationToTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cb5cd525462a080, []int{8}
}
func (m *AddOperationToTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddOperationToTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddOperationToTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddOperationToTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddOperationToTxRequest.Merge(m, src)
}
func (m *AddOperationToTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddOperationToTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddOperationToTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddOperationToTxRequest proto.InternalMessageInfo

func (m *AddOperationToTxRequest) GetTxId() int64 {
	if m != nil {
		return m.TxId
	}
	return 0
}

func (m *AddOperationToTxRequest) GetSrcAccId() int64 {
	if m != nil {
		return m.SrcAccId
	}
	return 0
}

func (m *AddOperationToTxRequest) GetDstAccId() int64 {
	if m != nil {
		return m.DstAccId
	}
	return 0
}

func (m *AddOperationToTxRequest) GetStrategy() OperStrategy {
	if m != nil {
		return m.Strategy
	}
	return OperStrategy_UNKNOW_OPS
}

func (m *AddOperationToTxRequest) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *AddOperationToTxRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *AddOperationToTxRequest) GetMeta() *[]byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *AddOperationToTxRequest) GetHold() bool {
	if m != nil {
		return m.Hold
	}
	return false
}

func (m *AddOperationToTxRequest) GetHoldAccId() int64 {
	if m != nil {
		return m.HoldAccId
	}
	return 0
}

type AddOperationToTxResponse struct {
	OperId               int64    `protobuf:"varint,1,opt,name=oper_id,json=operId,proto3" json:"oper_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddOperationToTxResponse) Reset()         { *m = AddOperationToTxResponse{} }
func (m *AddOperationToTxResponse) String() string { return proto.CompactTextString(m) }
func (*AddOperationToTxResponse) ProtoMessage()    {}
func (*AddOperationToTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cb5cd525462a080, []int{9}
}
func (m *AddOperationToTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddOperationToTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddOperationToTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddOperationToTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddOperationToTxResponse.Merge(m, src)
}
func (m *AddOperationToTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddOperationToTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddOperationToTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddOperationToTxResponse proto.InternalMessageInfo

func (m *AddOperationToTxResponse) GetOperId() int64 {
	if m != nil {
		return m.OperId
	}
	return 0
}

type GetOperationByIDRequest struct {
	OperId               int64    `protobuf:"varint,1,opt,name=oper_id,json=operId,proto3" json:"oper_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOperationByIDRequest) Reset()         { *m = GetOperationByIDRequest{} }
func (m *GetOperationByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetOperationByIDRequest) ProtoMessage()    {}
func (*GetOperationByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cb5cd525462a080, []int{10}
}
func (m *GetOperationByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOperationByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOperationByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOperationByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOperationByIDRequest.Merge(m, src)
}
func (m *GetOperationByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOperationByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOperationByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOperationByIDRequest proto.InternalMessageInfo

func (m *GetOperationByIDRequest) GetOperId() int64 {
	if m != nil {
		return m.OperId
	}
	return 0
}

type GetOperationByIDResponse struct {
	Oper                 *Oper    `protobuf:"bytes,1,opt,name=oper,proto3" json:"oper,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOperationByIDResponse) Reset()         { *m = GetOperationByIDResponse{} }
func (m *GetOperationByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetOperationByIDResponse) ProtoMessage()    {}
func (*GetOperationByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cb5cd525462a080, []int{11}
}
func (m *GetOperationByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOperationByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOperationByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOperationByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOperationByIDResponse.Merge(m, src)
}
func (m *GetOperationByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOperationByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOperationByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOperationByIDResponse proto.InternalMessageInfo

func (m *GetOperationByIDResponse) GetOper() *Oper {
	if m != nil {
		return m.Oper
	}
	return nil
}

type AuthInvoiceRequest struct {
	InvoiceId            int64    `protobuf:"varint,1,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthInvoiceRequest) Reset()         { *m = AuthInvoiceRequest{} }
func (m *AuthInvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*AuthInvoiceRequest) ProtoMessage()    {}
func (*AuthInvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cb5cd525462a080, []int{12}
}
func (m *AuthInvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthInvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthInvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthInvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthInvoiceRequest.Merge(m, src)
}
func (m *AuthInvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *AuthInvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthInvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthInvoiceRequest proto.InternalMessageInfo

func (m *AuthInvoiceRequest) GetInvoiceId() int64 {
	if m != nil {
		return m.InvoiceId
	}
	return 0
}

type AuthInvoiceResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthInvoiceResponse) Reset()         { *m = AuthInvoiceResponse{} }
func (m *AuthInvoiceResponse) String() string { return proto.CompactTextString(m) }
func (*AuthInvoiceResponse) ProtoMessage()    {}
func (*AuthInvoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cb5cd525462a080, []int{13}
}
func (m *AuthInvoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthInvoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthInvoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthInvoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthInvoiceResponse.Merge(m, src)
}
func (m *AuthInvoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *AuthInvoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthInvoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthInvoiceResponse proto.InternalMessageInfo

type AcceptInvoiceRequest struct {
	InvoiceId            int64    `protobuf:"varint,1,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AcceptInvoiceRequest) Reset()         { *m = AcceptInvoiceRequest{} }
func (m *AcceptInvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*AcceptInvoiceRequest) ProtoMessage()    {}
func (*AcceptInvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cb5cd525462a080, []int{14}
}
func (m *AcceptInvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcceptInvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcceptInvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcceptInvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptInvoiceRequest.Merge(m, src)
}
func (m *AcceptInvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *AcceptInvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptInvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptInvoiceRequest proto.InternalMessageInfo

func (m *AcceptInvoiceRequest) GetInvoiceId() int64 {
	if m != nil {
		return m.InvoiceId
	}
	return 0
}

type AcceptInvoiceResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AcceptInvoiceResponse) Reset()         { *m = AcceptInvoiceResponse{} }
func (m *AcceptInvoiceResponse) String() string { return proto.CompactTextString(m) }
func (*AcceptInvoiceResponse) ProtoMessage()    {}
func (*AcceptInvoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cb5cd525462a080, []int{15}
}
func (m *AcceptInvoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcceptInvoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcceptInvoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcceptInvoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptInvoiceResponse.Merge(m, src)
}
func (m *AcceptInvoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *AcceptInvoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptInvoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptInvoiceResponse proto.InternalMessageInfo

type RejectInvoiceRequest struct {
	InvoiceId            int64    `protobuf:"varint,1,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RejectInvoiceRequest) Reset()         { *m = RejectInvoiceRequest{} }
func (m *RejectInvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*RejectInvoiceRequest) ProtoMessage()    {}
func (*RejectInvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cb5cd525462a080, []int{16}
}
func (m *RejectInvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RejectInvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RejectInvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RejectInvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RejectInvoiceRequest.Merge(m, src)
}
func (m *RejectInvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *RejectInvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RejectInvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RejectInvoiceRequest proto.InternalMessageInfo

func (m *RejectInvoiceRequest) GetInvoiceId() int64 {
	if m != nil {
		return m.InvoiceId
	}
	return 0
}

type RejectInvoiceResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RejectInvoiceResponse) Reset()         { *m = RejectInvoiceResponse{} }
func (m *RejectInvoiceResponse) String() string { return proto.CompactTextString(m) }
func (*RejectInvoiceResponse) ProtoMessage()    {}
func (*RejectInvoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cb5cd525462a080, []int{17}
}
func (m *RejectInvoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RejectInvoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RejectInvoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RejectInvoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RejectInvoiceResponse.Merge(m, src)
}
func (m *RejectInvoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *RejectInvoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RejectInvoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RejectInvoiceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*NewInvoiceRequest)(nil), "api.NewInvoiceRequest")
	proto.RegisterType((*NewInvoiceResponse)(nil), "api.NewInvoiceResponse")
	proto.RegisterType((*GetInvoiceByIDRequest)(nil), "api.GetInvoiceByIDRequest")
	proto.RegisterType((*GetInvoiceByIDResponse)(nil), "api.GetInvoiceByIDResponse")
	proto.RegisterType((*AddTransactionToInvoiceRequest)(nil), "api.AddTransactionToInvoiceRequest")
	proto.RegisterType((*AddTransactionToInvoiceResponse)(nil), "api.AddTransactionToInvoiceResponse")
	proto.RegisterType((*GetTransactionByIDRequest)(nil), "api.GetTransactionByIDRequest")
	proto.RegisterType((*GetTransactionByIDResponse)(nil), "api.GetTransactionByIDResponse")
	proto.RegisterType((*AddOperationToTxRequest)(nil), "api.AddOperationToTxRequest")
	proto.RegisterType((*AddOperationToTxResponse)(nil), "api.AddOperationToTxResponse")
	proto.RegisterType((*GetOperationByIDRequest)(nil), "api.GetOperationByIDRequest")
	proto.RegisterType((*GetOperationByIDResponse)(nil), "api.GetOperationByIDResponse")
	proto.RegisterType((*AuthInvoiceRequest)(nil), "api.AuthInvoiceRequest")
	proto.RegisterType((*AuthInvoiceResponse)(nil), "api.AuthInvoiceResponse")
	proto.RegisterType((*AcceptInvoiceRequest)(nil), "api.AcceptInvoiceRequest")
	proto.RegisterType((*AcceptInvoiceResponse)(nil), "api.AcceptInvoiceResponse")
	proto.RegisterType((*RejectInvoiceRequest)(nil), "api.RejectInvoiceRequest")
	proto.RegisterType((*RejectInvoiceResponse)(nil), "api.RejectInvoiceResponse")
}

func init() { proto.RegisterFile("api/invoice.proto", fileDescriptor_3cb5cd525462a080) }

var fileDescriptor_3cb5cd525462a080 = []byte{
	// 795 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcf, 0x6e, 0xd3, 0x4c,
	0x10, 0xaf, 0x93, 0x34, 0x7f, 0x26, 0xdf, 0x57, 0xa5, 0xdb, 0xaf, 0x8d, 0xeb, 0xb6, 0x6e, 0xe4,
	0x0f, 0xa1, 0x08, 0xa9, 0x29, 0x4a, 0x69, 0x25, 0x4e, 0x90, 0x08, 0xa9, 0x44, 0x48, 0x20, 0xdc,
	0x08, 0x8e, 0xd5, 0xd6, 0xde, 0xa6, 0x86, 0x24, 0x6b, 0xbc, 0x1b, 0x9a, 0xbc, 0x0d, 0x07, 0x1e,
	0x81, 0x03, 0x8f, 0xd0, 0x23, 0x37, 0x8e, 0xa0, 0xf2, 0x22, 0xc8, 0xeb, 0xb5, 0xe3, 0xc4, 0x4e,
	0x51, 0x0e, 0x9c, 0xec, 0x9d, 0x99, 0xdf, 0x6f, 0x66, 0x7f, 0x33, 0x3b, 0xb0, 0x8e, 0x5d, 0xe7,
	0xd0, 0x19, 0x7e, 0xa4, 0x8e, 0x45, 0x1a, 0xae, 0x47, 0x39, 0x45, 0x59, 0xec, 0x3a, 0x5a, 0xc5,
	0xb7, 0x0f, 0xa8, 0x4d, 0xfa, 0x2c, 0x30, 0x6b, 0x07, 0x3d, 0x87, 0x5f, 0x8d, 0x2e, 0x1a, 0x16,
	0x1d, 0x1c, 0xf6, 0x68, 0x8f, 0x1e, 0x0a, 0xf3, 0xc5, 0xe8, 0x52, 0x9c, 0xc4, 0x41, 0xfc, 0xc9,
	0x70, 0xbd, 0x47, 0x69, 0xaf, 0x4f, 0xa6, 0x51, 0xd7, 0x1e, 0x76, 0x5d, 0xe2, 0x49, 0x3a, 0xe3,
	0xb3, 0x02, 0xeb, 0x2f, 0xc9, 0x75, 0x27, 0x48, 0x6d, 0x92, 0x0f, 0x23, 0xc2, 0x38, 0xaa, 0x40,
	0xf6, 0x3d, 0x99, 0xa8, 0x4a, 0x4d, 0xa9, 0x97, 0x4c, 0xff, 0x17, 0x3d, 0x80, 0x3c, 0xe3, 0x98,
	0x8f, 0x98, 0x9a, 0xa9, 0x29, 0xf5, 0xb5, 0x26, 0x6a, 0x60, 0xd7, 0x69, 0x48, 0xd8, 0x99, 0xf0,
	0x98, 0x32, 0x02, 0x69, 0x50, 0x64, 0xdc, 0xc3, 0x9c, 0xf4, 0x26, 0x6a, 0x56, 0x50, 0x44, 0x67,
	0x74, 0x0c, 0xb9, 0x01, 0xe1, 0x58, 0xcd, 0xd5, 0x94, 0x7a, 0xb9, 0xb9, 0xd3, 0x08, 0xca, 0x6b,
	0x84, 0xe5, 0x35, 0xda, 0x13, 0x4e, 0xd8, 0x1b, 0xdc, 0x1f, 0x91, 0x76, 0xee, 0xd3, 0x8f, 0x7d,
	0xc5, 0x14, 0xe1, 0xc6, 0x11, 0xa0, 0x78, 0x95, 0xcc, 0xa5, 0x43, 0x46, 0xd0, 0x1e, 0x80, 0xd4,
	0xec, 0xdc, 0xb1, 0x45, 0xb5, 0x59, 0xb3, 0x24, 0x2d, 0x1d, 0xdb, 0x38, 0x81, 0xcd, 0x53, 0xc2,
	0x25, 0xa8, 0x3d, 0xe9, 0x3c, 0x0b, 0xaf, 0xf7, 0x07, 0xdc, 0x53, 0xd8, 0x9a, 0xc7, 0xc9, 0x84,
	0xf7, 0xa1, 0x20, 0xc3, 0x04, 0xaa, 0xdc, 0xfc, 0x27, 0x2e, 0x83, 0x19, 0x3a, 0x8d, 0x1b, 0x05,
	0xf4, 0x96, 0x6d, 0x77, 0x3d, 0x3c, 0x64, 0xd8, 0xe2, 0x0e, 0x1d, 0x76, 0xe9, 0x9c, 0xc4, 0x77,
	0xd7, 0x80, 0x1e, 0x05, 0x1d, 0xc8, 0x88, 0x2c, 0xbb, 0x09, 0x99, 0xce, 0xb8, 0xe7, 0x0c, 0x7b,
	0x71, 0x9d, 0x44, 0x97, 0xfe, 0x82, 0xf2, 0x27, 0xb0, 0xbf, 0xf0, 0x26, 0x52, 0x95, 0x0d, 0x58,
	0xe5, 0xe3, 0xe9, 0x2d, 0x72, 0x7c, 0xdc, 0xb1, 0x8d, 0x87, 0xb0, 0x7d, 0x4a, 0x78, 0x0c, 0x17,
	0x6f, 0x40, 0x2a, 0xe2, 0x18, 0xb4, 0x34, 0x84, 0x4c, 0x52, 0x85, 0x0c, 0x1f, 0x4b, 0xd5, 0x0b,
	0x42, 0xf5, 0xee, 0xd8, 0xcc, 0xf0, 0xb1, 0xf1, 0x25, 0x03, 0xd5, 0x96, 0x6d, 0xbf, 0x72, 0x89,
	0x87, 0x83, 0xfa, 0xba, 0xe3, 0x44, 0x9e, 0xcc, 0x34, 0x0f, 0xda, 0x05, 0x60, 0x9e, 0x75, 0x8e,
	0x2d, 0xcb, 0xf7, 0x64, 0x85, 0xa7, 0xc8, 0x3c, 0xab, 0x65, 0x59, 0x81, 0xd7, 0x66, 0x3c, 0xf4,
	0xe6, 0x02, 0xaf, 0xcd, 0x78, 0xe0, 0x3d, 0x88, 0x09, 0xbc, 0x2a, 0x1e, 0xc2, 0xba, 0xa8, 0xc5,
	0xcf, 0x7e, 0x26, 0x1d, 0x31, 0xcd, 0xb7, 0x20, 0x8f, 0x07, 0x74, 0x34, 0xe4, 0x6a, 0x5e, 0x10,
	0xc9, 0x93, 0x6f, 0xf7, 0x08, 0x66, 0x74, 0xa8, 0x16, 0x44, 0x97, 0xe4, 0x29, 0xea, 0x51, 0x71,
	0xa9, 0x1e, 0x21, 0x04, 0xb9, 0x2b, 0xda, 0xb7, 0xd5, 0x52, 0x4d, 0xa9, 0x17, 0x4d, 0xf1, 0x8f,
	0x74, 0x28, 0xfb, 0xdf, 0xf0, 0x22, 0x10, 0x0c, 0x98, 0x6f, 0x12, 0x37, 0x31, 0x8e, 0x40, 0x4d,
	0xaa, 0x16, 0x69, 0x5d, 0xa0, 0x2e, 0xf1, 0xa6, 0x0d, 0xca, 0xfb, 0xc7, 0x8e, 0x6d, 0x34, 0xa1,
	0x7a, 0x4a, 0x78, 0x04, 0x8a, 0xb7, 0x74, 0x21, 0xe6, 0x31, 0xa8, 0x49, 0x4c, 0xf4, 0x80, 0x73,
	0x7e, 0x94, 0x6c, 0x6b, 0x29, 0x92, 0xd2, 0x14, 0x66, 0xff, 0xd5, 0xb7, 0x46, 0xfc, 0x6a, 0xa9,
	0x97, 0x63, 0x6c, 0xc2, 0xc6, 0x0c, 0x28, 0x48, 0x65, 0x1c, 0xc3, 0x7f, 0x2d, 0xcb, 0x22, 0x2e,
	0x5f, 0x8e, 0xad, 0x0a, 0x9b, 0x73, 0xb0, 0x29, 0x9f, 0x49, 0xde, 0x11, 0x6b, 0x79, 0xbe, 0x39,
	0x58, 0xc0, 0xd7, 0xfc, 0xbe, 0x0a, 0x45, 0x69, 0x63, 0xe8, 0x09, 0xc0, 0x74, 0xdd, 0xa1, 0x2d,
	0xa1, 0x4b, 0x62, 0x4b, 0x6b, 0xd5, 0x84, 0x5d, 0xd6, 0xb6, 0x82, 0x5e, 0xc0, 0xda, 0xec, 0x0a,
	0x43, 0x9a, 0x08, 0x4e, 0xdd, 0x87, 0xda, 0x4e, 0xaa, 0x2f, 0x22, 0xbb, 0x14, 0x0f, 0x2c, 0x6d,
	0x05, 0xa0, 0xff, 0x05, 0xf2, 0xee, 0x55, 0xa7, 0xdd, 0xbb, 0x3b, 0x28, 0xca, 0xf3, 0x16, 0x50,
	0x72, 0x01, 0x20, 0x3d, 0x2c, 0x2e, 0x7d, 0x97, 0x68, 0xfb, 0x0b, 0xfd, 0x11, 0xf1, 0x6b, 0xa8,
	0xcc, 0xcf, 0x3a, 0xda, 0x0d, 0x8b, 0x4a, 0x5b, 0x1c, 0xda, 0xde, 0x02, 0x6f, 0x9c, 0x72, 0x7e,
	0xaa, 0x25, 0xe5, 0x82, 0x07, 0x22, 0x29, 0x17, 0x3d, 0x05, 0x63, 0x05, 0xb5, 0xa1, 0x1c, 0x1b,
	0x5c, 0x14, 0x74, 0x37, 0x39, 0xff, 0x9a, 0x9a, 0x74, 0x44, 0x1c, 0xcf, 0xe1, 0xdf, 0x99, 0x71,
	0x45, 0xdb, 0x41, 0x70, 0xca, 0xe4, 0x6b, 0x5a, 0x9a, 0x2b, 0xce, 0x34, 0x33, 0xa8, 0x92, 0x29,
	0x6d, 0xe6, 0x25, 0x53, 0xea, 0x5c, 0x1b, 0x2b, 0xed, 0xca, 0xcd, 0xad, 0xae, 0x7c, 0xbb, 0xd5,
	0x95, 0x9f, 0xb7, 0xba, 0xf2, 0xf5, 0x97, 0xae, 0x5c, 0xe4, 0xc5, 0x42, 0x3b, 0xfa, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0x6f, 0xbb, 0x37, 0x5d, 0xf6, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InvoicesClient is the client API for Invoices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InvoicesClient interface {
	NewInvoice(ctx context.Context, in *NewInvoiceRequest, opts ...grpc.CallOption) (*NewInvoiceResponse, error)
	GetInvoiceByID(ctx context.Context, in *GetInvoiceByIDRequest, opts ...grpc.CallOption) (*GetInvoiceByIDResponse, error)
	AddTransactionToInvoice(ctx context.Context, in *AddTransactionToInvoiceRequest, opts ...grpc.CallOption) (*AddTransactionToInvoiceResponse, error)
	GetTransactionByID(ctx context.Context, in *GetTransactionByIDRequest, opts ...grpc.CallOption) (*GetTransactionByIDResponse, error)
	AddOperationToTx(ctx context.Context, in *AddOperationToTxRequest, opts ...grpc.CallOption) (*AddOperationToTxResponse, error)
	GetOperationByID(ctx context.Context, in *GetOperationByIDRequest, opts ...grpc.CallOption) (*GetOperationByIDResponse, error)
	AuthInvoice(ctx context.Context, in *AuthInvoiceRequest, opts ...grpc.CallOption) (*AuthInvoiceResponse, error)
	AcceptInvoice(ctx context.Context, in *AcceptInvoiceRequest, opts ...grpc.CallOption) (*AcceptInvoiceResponse, error)
	RejectInvoice(ctx context.Context, in *RejectInvoiceRequest, opts ...grpc.CallOption) (*RejectInvoiceResponse, error)
}

type invoicesClient struct {
	cc *grpc.ClientConn
}

func NewInvoicesClient(cc *grpc.ClientConn) InvoicesClient {
	return &invoicesClient{cc}
}

func (c *invoicesClient) NewInvoice(ctx context.Context, in *NewInvoiceRequest, opts ...grpc.CallOption) (*NewInvoiceResponse, error) {
	out := new(NewInvoiceResponse)
	err := c.cc.Invoke(ctx, "/api.Invoices/NewInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicesClient) GetInvoiceByID(ctx context.Context, in *GetInvoiceByIDRequest, opts ...grpc.CallOption) (*GetInvoiceByIDResponse, error) {
	out := new(GetInvoiceByIDResponse)
	err := c.cc.Invoke(ctx, "/api.Invoices/GetInvoiceByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicesClient) AddTransactionToInvoice(ctx context.Context, in *AddTransactionToInvoiceRequest, opts ...grpc.CallOption) (*AddTransactionToInvoiceResponse, error) {
	out := new(AddTransactionToInvoiceResponse)
	err := c.cc.Invoke(ctx, "/api.Invoices/AddTransactionToInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicesClient) GetTransactionByID(ctx context.Context, in *GetTransactionByIDRequest, opts ...grpc.CallOption) (*GetTransactionByIDResponse, error) {
	out := new(GetTransactionByIDResponse)
	err := c.cc.Invoke(ctx, "/api.Invoices/GetTransactionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicesClient) AddOperationToTx(ctx context.Context, in *AddOperationToTxRequest, opts ...grpc.CallOption) (*AddOperationToTxResponse, error) {
	out := new(AddOperationToTxResponse)
	err := c.cc.Invoke(ctx, "/api.Invoices/AddOperationToTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicesClient) GetOperationByID(ctx context.Context, in *GetOperationByIDRequest, opts ...grpc.CallOption) (*GetOperationByIDResponse, error) {
	out := new(GetOperationByIDResponse)
	err := c.cc.Invoke(ctx, "/api.Invoices/GetOperationByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicesClient) AuthInvoice(ctx context.Context, in *AuthInvoiceRequest, opts ...grpc.CallOption) (*AuthInvoiceResponse, error) {
	out := new(AuthInvoiceResponse)
	err := c.cc.Invoke(ctx, "/api.Invoices/AuthInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicesClient) AcceptInvoice(ctx context.Context, in *AcceptInvoiceRequest, opts ...grpc.CallOption) (*AcceptInvoiceResponse, error) {
	out := new(AcceptInvoiceResponse)
	err := c.cc.Invoke(ctx, "/api.Invoices/AcceptInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicesClient) RejectInvoice(ctx context.Context, in *RejectInvoiceRequest, opts ...grpc.CallOption) (*RejectInvoiceResponse, error) {
	out := new(RejectInvoiceResponse)
	err := c.cc.Invoke(ctx, "/api.Invoices/RejectInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoicesServer is the server API for Invoices service.
type InvoicesServer interface {
	NewInvoice(context.Context, *NewInvoiceRequest) (*NewInvoiceResponse, error)
	GetInvoiceByID(context.Context, *GetInvoiceByIDRequest) (*GetInvoiceByIDResponse, error)
	AddTransactionToInvoice(context.Context, *AddTransactionToInvoiceRequest) (*AddTransactionToInvoiceResponse, error)
	GetTransactionByID(context.Context, *GetTransactionByIDRequest) (*GetTransactionByIDResponse, error)
	AddOperationToTx(context.Context, *AddOperationToTxRequest) (*AddOperationToTxResponse, error)
	GetOperationByID(context.Context, *GetOperationByIDRequest) (*GetOperationByIDResponse, error)
	AuthInvoice(context.Context, *AuthInvoiceRequest) (*AuthInvoiceResponse, error)
	AcceptInvoice(context.Context, *AcceptInvoiceRequest) (*AcceptInvoiceResponse, error)
	RejectInvoice(context.Context, *RejectInvoiceRequest) (*RejectInvoiceResponse, error)
}

func RegisterInvoicesServer(s *grpc.Server, srv InvoicesServer) {
	s.RegisterService(&_Invoices_serviceDesc, srv)
}

func _Invoices_NewInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicesServer).NewInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Invoices/NewInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicesServer).NewInvoice(ctx, req.(*NewInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invoices_GetInvoiceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicesServer).GetInvoiceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Invoices/GetInvoiceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicesServer).GetInvoiceByID(ctx, req.(*GetInvoiceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invoices_AddTransactionToInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTransactionToInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicesServer).AddTransactionToInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Invoices/AddTransactionToInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicesServer).AddTransactionToInvoice(ctx, req.(*AddTransactionToInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invoices_GetTransactionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicesServer).GetTransactionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Invoices/GetTransactionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicesServer).GetTransactionByID(ctx, req.(*GetTransactionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invoices_AddOperationToTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOperationToTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicesServer).AddOperationToTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Invoices/AddOperationToTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicesServer).AddOperationToTx(ctx, req.(*AddOperationToTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invoices_GetOperationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicesServer).GetOperationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Invoices/GetOperationByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicesServer).GetOperationByID(ctx, req.(*GetOperationByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invoices_AuthInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicesServer).AuthInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Invoices/AuthInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicesServer).AuthInvoice(ctx, req.(*AuthInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invoices_AcceptInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicesServer).AcceptInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Invoices/AcceptInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicesServer).AcceptInvoice(ctx, req.(*AcceptInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invoices_RejectInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicesServer).RejectInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Invoices/RejectInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicesServer).RejectInvoice(ctx, req.(*RejectInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Invoices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Invoices",
	HandlerType: (*InvoicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewInvoice",
			Handler:    _Invoices_NewInvoice_Handler,
		},
		{
			MethodName: "GetInvoiceByID",
			Handler:    _Invoices_GetInvoiceByID_Handler,
		},
		{
			MethodName: "AddTransactionToInvoice",
			Handler:    _Invoices_AddTransactionToInvoice_Handler,
		},
		{
			MethodName: "GetTransactionByID",
			Handler:    _Invoices_GetTransactionByID_Handler,
		},
		{
			MethodName: "AddOperationToTx",
			Handler:    _Invoices_AddOperationToTx_Handler,
		},
		{
			MethodName: "GetOperationByID",
			Handler:    _Invoices_GetOperationByID_Handler,
		},
		{
			MethodName: "AuthInvoice",
			Handler:    _Invoices_AuthInvoice_Handler,
		},
		{
			MethodName: "AcceptInvoice",
			Handler:    _Invoices_AcceptInvoice_Handler,
		},
		{
			MethodName: "RejectInvoice",
			Handler:    _Invoices_RejectInvoice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/invoice.proto",
}

func (m *NewInvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewInvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.Status))
	}
	if len(m.Strategy) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(len(m.Strategy)))
		i += copy(dAtA[i:], m.Strategy)
	}
	if m.Meta != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdBytes(*m.Meta)))
		n1, err := github_com_gogo_protobuf_types.StdBytesMarshalTo(*m.Meta, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewInvoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewInvoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InvoiceId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.InvoiceId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetInvoiceByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInvoiceByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InvoiceId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.InvoiceId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetInvoiceByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInvoiceByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Invoice != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.Invoice.Size()))
		n2, err := m.Invoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddTransactionToInvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTransactionToInvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InvoiceId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.InvoiceId))
	}
	if m.Key != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdString(*m.Key)))
		n3, err := github_com_gogo_protobuf_types.StdStringMarshalTo(*m.Key, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Strategy) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(len(m.Strategy)))
		i += copy(dAtA[i:], m.Strategy)
	}
	if m.Meta != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdBytes(*m.Meta)))
		n4, err := github_com_gogo_protobuf_types.StdBytesMarshalTo(*m.Meta, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddTransactionToInvoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTransactionToInvoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TxId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.TxId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetTransactionByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTransactionByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TxId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.TxId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetTransactionByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTransactionByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tx != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.Tx.Size()))
		n5, err := m.Tx.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddOperationToTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddOperationToTxRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TxId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.TxId))
	}
	if m.SrcAccId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.SrcAccId))
	}
	if m.DstAccId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.DstAccId))
	}
	if m.Strategy != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.Strategy))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.Amount))
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if m.Meta != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdBytes(*m.Meta)))
		n6, err := github_com_gogo_protobuf_types.StdBytesMarshalTo(*m.Meta, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Hold {
		dAtA[i] = 0x48
		i++
		if m.Hold {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HoldAccId != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.HoldAccId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddOperationToTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddOperationToTxResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OperId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.OperId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetOperationByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOperationByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OperId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.OperId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetOperationByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOperationByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Oper != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.Oper.Size()))
		n7, err := m.Oper.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AuthInvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthInvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InvoiceId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.InvoiceId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AuthInvoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthInvoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AcceptInvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptInvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InvoiceId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.InvoiceId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AcceptInvoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptInvoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RejectInvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RejectInvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InvoiceId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.InvoiceId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RejectInvoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RejectInvoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintInvoice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NewInvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovInvoice(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovInvoice(uint64(m.Status))
	}
	l = len(m.Strategy)
	if l > 0 {
		n += 1 + l + sovInvoice(uint64(l))
	}
	if m.Meta != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdBytes(*m.Meta)
		n += 1 + l + sovInvoice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewInvoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InvoiceId != 0 {
		n += 1 + sovInvoice(uint64(m.InvoiceId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetInvoiceByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InvoiceId != 0 {
		n += 1 + sovInvoice(uint64(m.InvoiceId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetInvoiceByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Invoice != nil {
		l = m.Invoice.Size()
		n += 1 + l + sovInvoice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddTransactionToInvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InvoiceId != 0 {
		n += 1 + sovInvoice(uint64(m.InvoiceId))
	}
	if m.Key != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdString(*m.Key)
		n += 1 + l + sovInvoice(uint64(l))
	}
	l = len(m.Strategy)
	if l > 0 {
		n += 1 + l + sovInvoice(uint64(l))
	}
	if m.Meta != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdBytes(*m.Meta)
		n += 1 + l + sovInvoice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddTransactionToInvoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxId != 0 {
		n += 1 + sovInvoice(uint64(m.TxId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTransactionByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxId != 0 {
		n += 1 + sovInvoice(uint64(m.TxId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTransactionByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovInvoice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddOperationToTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxId != 0 {
		n += 1 + sovInvoice(uint64(m.TxId))
	}
	if m.SrcAccId != 0 {
		n += 1 + sovInvoice(uint64(m.SrcAccId))
	}
	if m.DstAccId != 0 {
		n += 1 + sovInvoice(uint64(m.DstAccId))
	}
	if m.Strategy != 0 {
		n += 1 + sovInvoice(uint64(m.Strategy))
	}
	if m.Amount != 0 {
		n += 1 + sovInvoice(uint64(m.Amount))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovInvoice(uint64(l))
	}
	if m.Meta != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdBytes(*m.Meta)
		n += 1 + l + sovInvoice(uint64(l))
	}
	if m.Hold {
		n += 2
	}
	if m.HoldAccId != 0 {
		n += 1 + sovInvoice(uint64(m.HoldAccId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddOperationToTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperId != 0 {
		n += 1 + sovInvoice(uint64(m.OperId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOperationByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperId != 0 {
		n += 1 + sovInvoice(uint64(m.OperId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOperationByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oper != nil {
		l = m.Oper.Size()
		n += 1 + l + sovInvoice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuthInvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InvoiceId != 0 {
		n += 1 + sovInvoice(uint64(m.InvoiceId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuthInvoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AcceptInvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InvoiceId != 0 {
		n += 1 + sovInvoice(uint64(m.InvoiceId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AcceptInvoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RejectInvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InvoiceId != 0 {
		n += 1 + sovInvoice(uint64(m.InvoiceId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RejectInvoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovInvoice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInvoice(x uint64) (n int) {
	return sovInvoice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NewInvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewInvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewInvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= InvoiceStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strategy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = new([]byte)
			}
			if err := github_com_gogo_protobuf_types.StdBytesUnmarshal(m.Meta, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewInvoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewInvoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewInvoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceId", wireType)
			}
			m.InvoiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvoiceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInvoiceByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInvoiceByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInvoiceByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceId", wireType)
			}
			m.InvoiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvoiceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInvoiceByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInvoiceByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInvoiceByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Invoice == nil {
				m.Invoice = &Invoice{}
			}
			if err := m.Invoice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddTransactionToInvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTransactionToInvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTransactionToInvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceId", wireType)
			}
			m.InvoiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvoiceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = new(string)
			}
			if err := github_com_gogo_protobuf_types.StdStringUnmarshal(m.Key, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strategy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = new([]byte)
			}
			if err := github_com_gogo_protobuf_types.StdBytesUnmarshal(m.Meta, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddTransactionToInvoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTransactionToInvoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTransactionToInvoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			m.TxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTransactionByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTransactionByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTransactionByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			m.TxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTransactionByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTransactionByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTransactionByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &Tx{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddOperationToTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddOperationToTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddOperationToTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			m.TxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcAccId", wireType)
			}
			m.SrcAccId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcAccId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstAccId", wireType)
			}
			m.DstAccId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstAccId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			m.Strategy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Strategy |= OperStrategy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = new([]byte)
			}
			if err := github_com_gogo_protobuf_types.StdBytesUnmarshal(m.Meta, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hold", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hold = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldAccId", wireType)
			}
			m.HoldAccId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoldAccId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddOperationToTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddOperationToTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddOperationToTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperId", wireType)
			}
			m.OperId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOperationByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOperationByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOperationByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperId", wireType)
			}
			m.OperId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOperationByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOperationByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOperationByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oper", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Oper == nil {
				m.Oper = &Oper{}
			}
			if err := m.Oper.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthInvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthInvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthInvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceId", wireType)
			}
			m.InvoiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvoiceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthInvoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthInvoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthInvoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptInvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptInvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptInvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceId", wireType)
			}
			m.InvoiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvoiceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptInvoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptInvoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptInvoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RejectInvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RejectInvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RejectInvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceId", wireType)
			}
			m.InvoiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvoiceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RejectInvoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RejectInvoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RejectInvoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInvoice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInvoice
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthInvoice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInvoice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInvoice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthInvoice
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInvoice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInvoice   = fmt.Errorf("proto: integer overflow")
)
