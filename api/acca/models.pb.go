// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/acca/models.proto

package acca

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TxStatus int32

const (
	TxStatus_UNKNOWN_TS TxStatus = 0
	TxStatus_DRAFT      TxStatus = 1
	TxStatus_AUTH       TxStatus = 2
	TxStatus_ACCEPTED   TxStatus = 3
	TxStatus_REJECTED   TxStatus = 4
	TxStatus_FAILED     TxStatus = 5
)

var TxStatus_name = map[int32]string{
	0: "UNKNOWN_TS",
	1: "DRAFT",
	2: "AUTH",
	3: "ACCEPTED",
	4: "REJECTED",
	5: "FAILED",
}
var TxStatus_value = map[string]int32{
	"UNKNOWN_TS": 0,
	"DRAFT":      1,
	"AUTH":       2,
	"ACCEPTED":   3,
	"REJECTED":   4,
	"FAILED":     5,
}

func (x TxStatus) String() string {
	return proto.EnumName(TxStatus_name, int32(x))
}
func (TxStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_models_26c0dcbc37c6fa9d, []int{0}
}

type OperType int32

const (
	OperType_UNKNOWN_OT OperType = 0
	OperType_INTERNAL   OperType = 1
	OperType_RECHARGE   OperType = 2
	OperType_WITHDRAW   OperType = 3
)

var OperType_name = map[int32]string{
	0: "UNKNOWN_OT",
	1: "INTERNAL",
	2: "RECHARGE",
	3: "WITHDRAW",
}
var OperType_value = map[string]int32{
	"UNKNOWN_OT": 0,
	"INTERNAL":   1,
	"RECHARGE":   2,
	"WITHDRAW":   3,
}

func (x OperType) String() string {
	return proto.EnumName(OperType_name, int32(x))
}
func (OperType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_models_26c0dcbc37c6fa9d, []int{1}
}

type Tx struct {
	TxId                 int64             `protobuf:"varint,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Reason               string            `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Meta                 map[string]string `protobuf:"bytes,3,rep,name=meta" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status               TxStatus          `protobuf:"varint,4,opt,name=status,proto3,enum=acca.TxStatus" json:"status,omitempty"`
	Errm                 string            `protobuf:"bytes,5,opt,name=errm,proto3" json:"errm,omitempty"`
	CreatedAt            int64             `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int64             `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Opers                []*TxOper         `protobuf:"bytes,8,rep,name=opers" json:"opers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Tx) Reset()         { *m = Tx{} }
func (m *Tx) String() string { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()    {}
func (*Tx) Descriptor() ([]byte, []int) {
	return fileDescriptor_models_26c0dcbc37c6fa9d, []int{0}
}
func (m *Tx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Tx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tx.Merge(dst, src)
}
func (m *Tx) XXX_Size() int {
	return m.Size()
}
func (m *Tx) XXX_DiscardUnknown() {
	xxx_messageInfo_Tx.DiscardUnknown(m)
}

var xxx_messageInfo_Tx proto.InternalMessageInfo

func (m *Tx) GetTxId() int64 {
	if m != nil {
		return m.TxId
	}
	return 0
}

func (m *Tx) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Tx) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Tx) GetStatus() TxStatus {
	if m != nil {
		return m.Status
	}
	return TxStatus_UNKNOWN_TS
}

func (m *Tx) GetErrm() string {
	if m != nil {
		return m.Errm
	}
	return ""
}

func (m *Tx) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Tx) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Tx) GetOpers() []*TxOper {
	if m != nil {
		return m.Opers
	}
	return nil
}

type RecentActivity struct {
	Id                   int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OperId               int64               `protobuf:"varint,2,opt,name=oper_id,json=operId,proto3" json:"oper_id,omitempty"`
	AccId                int64               `protobuf:"varint,3,opt,name=acc_id,json=accId,proto3" json:"acc_id,omitempty"`
	Amount               int64               `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Balance              int64               `protobuf:"varint,5,opt,name=balance,proto3" json:"balance,omitempty"`
	MaBalances           []*BalanceShortInfo `protobuf:"bytes,6,rep,name=ma_balances,json=maBalances" json:"ma_balances,omitempty"`
	TxId                 int64               `protobuf:"varint,7,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	SrcAccId             int64               `protobuf:"varint,8,opt,name=src_acc_id,json=srcAccId,proto3" json:"src_acc_id,omitempty"`
	DstAccId             int64               `protobuf:"varint,9,opt,name=dst_acc_id,json=dstAccId,proto3" json:"dst_acc_id,omitempty"`
	Reason               string              `protobuf:"bytes,10,opt,name=reason,proto3" json:"reason,omitempty"`
	TxReason             string              `protobuf:"bytes,11,opt,name=tx_reason,json=txReason,proto3" json:"tx_reason,omitempty"`
	AccKey               string              `protobuf:"bytes,12,opt,name=acc_key,json=accKey,proto3" json:"acc_key,omitempty"`
	AccCurrId            int64               `protobuf:"varint,13,opt,name=acc_curr_id,json=accCurrId,proto3" json:"acc_curr_id,omitempty"`
	AccCurrKey           string              `protobuf:"bytes,14,opt,name=acc_curr_key,json=accCurrKey,proto3" json:"acc_curr_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RecentActivity) Reset()         { *m = RecentActivity{} }
func (m *RecentActivity) String() string { return proto.CompactTextString(m) }
func (*RecentActivity) ProtoMessage()    {}
func (*RecentActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_models_26c0dcbc37c6fa9d, []int{1}
}
func (m *RecentActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecentActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecentActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RecentActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecentActivity.Merge(dst, src)
}
func (m *RecentActivity) XXX_Size() int {
	return m.Size()
}
func (m *RecentActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_RecentActivity.DiscardUnknown(m)
}

var xxx_messageInfo_RecentActivity proto.InternalMessageInfo

func (m *RecentActivity) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RecentActivity) GetOperId() int64 {
	if m != nil {
		return m.OperId
	}
	return 0
}

func (m *RecentActivity) GetAccId() int64 {
	if m != nil {
		return m.AccId
	}
	return 0
}

func (m *RecentActivity) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *RecentActivity) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *RecentActivity) GetMaBalances() []*BalanceShortInfo {
	if m != nil {
		return m.MaBalances
	}
	return nil
}

func (m *RecentActivity) GetTxId() int64 {
	if m != nil {
		return m.TxId
	}
	return 0
}

func (m *RecentActivity) GetSrcAccId() int64 {
	if m != nil {
		return m.SrcAccId
	}
	return 0
}

func (m *RecentActivity) GetDstAccId() int64 {
	if m != nil {
		return m.DstAccId
	}
	return 0
}

func (m *RecentActivity) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *RecentActivity) GetTxReason() string {
	if m != nil {
		return m.TxReason
	}
	return ""
}

func (m *RecentActivity) GetAccKey() string {
	if m != nil {
		return m.AccKey
	}
	return ""
}

func (m *RecentActivity) GetAccCurrId() int64 {
	if m != nil {
		return m.AccCurrId
	}
	return 0
}

func (m *RecentActivity) GetAccCurrKey() string {
	if m != nil {
		return m.AccCurrKey
	}
	return ""
}

type TxOper struct {
	SrcAccId             int64             `protobuf:"varint,1,opt,name=src_acc_id,json=srcAccId,proto3" json:"src_acc_id,omitempty"`
	DstAccId             int64             `protobuf:"varint,2,opt,name=dst_acc_id,json=dstAccId,proto3" json:"dst_acc_id,omitempty"`
	Type                 string            `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Amount               int64             `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Reason               string            `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	Meta                 map[string]string `protobuf:"bytes,6,rep,name=meta" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Hold                 bool              `protobuf:"varint,7,opt,name=hold,proto3" json:"hold"`
	HoldAccId            int64             `protobuf:"varint,8,opt,name=hold_acc_id,json=holdAccId,proto3" json:"hold_acc_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TxOper) Reset()         { *m = TxOper{} }
func (m *TxOper) String() string { return proto.CompactTextString(m) }
func (*TxOper) ProtoMessage()    {}
func (*TxOper) Descriptor() ([]byte, []int) {
	return fileDescriptor_models_26c0dcbc37c6fa9d, []int{2}
}
func (m *TxOper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxOper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxOper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TxOper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxOper.Merge(dst, src)
}
func (m *TxOper) XXX_Size() int {
	return m.Size()
}
func (m *TxOper) XXX_DiscardUnknown() {
	xxx_messageInfo_TxOper.DiscardUnknown(m)
}

var xxx_messageInfo_TxOper proto.InternalMessageInfo

func (m *TxOper) GetSrcAccId() int64 {
	if m != nil {
		return m.SrcAccId
	}
	return 0
}

func (m *TxOper) GetDstAccId() int64 {
	if m != nil {
		return m.DstAccId
	}
	return 0
}

func (m *TxOper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TxOper) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TxOper) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *TxOper) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *TxOper) GetHold() bool {
	if m != nil {
		return m.Hold
	}
	return false
}

func (m *TxOper) GetHoldAccId() int64 {
	if m != nil {
		return m.HoldAccId
	}
	return 0
}

type Currency struct {
	CurrId               int64             `protobuf:"varint,1,opt,name=curr_id,json=currId,proto3" json:"curr_id,omitempty"`
	Key                  string            `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Meta                 map[string]string `protobuf:"bytes,3,rep,name=meta" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Currency) Reset()         { *m = Currency{} }
func (m *Currency) String() string { return proto.CompactTextString(m) }
func (*Currency) ProtoMessage()    {}
func (*Currency) Descriptor() ([]byte, []int) {
	return fileDescriptor_models_26c0dcbc37c6fa9d, []int{3}
}
func (m *Currency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Currency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Currency.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Currency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Currency.Merge(dst, src)
}
func (m *Currency) XXX_Size() int {
	return m.Size()
}
func (m *Currency) XXX_DiscardUnknown() {
	xxx_messageInfo_Currency.DiscardUnknown(m)
}

var xxx_messageInfo_Currency proto.InternalMessageInfo

func (m *Currency) GetCurrId() int64 {
	if m != nil {
		return m.CurrId
	}
	return 0
}

func (m *Currency) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Currency) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

type BalanceShortInfo struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"t"`
	Balance              int64    `protobuf:"varint,2,opt,name=balance,proto3" json:"b"`
	AccId                int64    `protobuf:"varint,3,opt,name=acc_id,json=accId,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BalanceShortInfo) Reset()         { *m = BalanceShortInfo{} }
func (m *BalanceShortInfo) String() string { return proto.CompactTextString(m) }
func (*BalanceShortInfo) ProtoMessage()    {}
func (*BalanceShortInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_models_26c0dcbc37c6fa9d, []int{4}
}
func (m *BalanceShortInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalanceShortInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalanceShortInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BalanceShortInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceShortInfo.Merge(dst, src)
}
func (m *BalanceShortInfo) XXX_Size() int {
	return m.Size()
}
func (m *BalanceShortInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceShortInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceShortInfo proto.InternalMessageInfo

func (m *BalanceShortInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *BalanceShortInfo) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *BalanceShortInfo) GetAccId() int64 {
	if m != nil {
		return m.AccId
	}
	return 0
}

type Account struct {
	AccId                int64             `protobuf:"varint,1,opt,name=acc_id,json=accId,proto3" json:"acc_id,omitempty"`
	CurrId               int64             `protobuf:"varint,2,opt,name=curr_id,json=currId,proto3" json:"curr_id,omitempty"`
	Key                  string            `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Balance              int64             `protobuf:"varint,4,opt,name=balance,proto3" json:"balance,omitempty"`
	Meta                 map[string]string `protobuf:"bytes,5,rep,name=meta" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Curr                 *Currency         `protobuf:"bytes,6,opt,name=curr" json:"curr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_models_26c0dcbc37c6fa9d, []int{5}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(dst, src)
}
func (m *Account) XXX_Size() int {
	return m.Size()
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetAccId() int64 {
	if m != nil {
		return m.AccId
	}
	return 0
}

func (m *Account) GetCurrId() int64 {
	if m != nil {
		return m.CurrId
	}
	return 0
}

func (m *Account) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Account) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *Account) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Account) GetCurr() *Currency {
	if m != nil {
		return m.Curr
	}
	return nil
}

type UserAccounts struct {
	UserId               string              `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Balances             []*BalanceShortInfo `protobuf:"bytes,2,rep,name=balances" json:"balances,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UserAccounts) Reset()         { *m = UserAccounts{} }
func (m *UserAccounts) String() string { return proto.CompactTextString(m) }
func (*UserAccounts) ProtoMessage()    {}
func (*UserAccounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_models_26c0dcbc37c6fa9d, []int{6}
}
func (m *UserAccounts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAccounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAccounts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserAccounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAccounts.Merge(dst, src)
}
func (m *UserAccounts) XXX_Size() int {
	return m.Size()
}
func (m *UserAccounts) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAccounts.DiscardUnknown(m)
}

var xxx_messageInfo_UserAccounts proto.InternalMessageInfo

func (m *UserAccounts) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserAccounts) GetBalances() []*BalanceShortInfo {
	if m != nil {
		return m.Balances
	}
	return nil
}

func init() {
	proto.RegisterType((*Tx)(nil), "acca.Tx")
	proto.RegisterMapType((map[string]string)(nil), "acca.Tx.MetaEntry")
	proto.RegisterType((*RecentActivity)(nil), "acca.RecentActivity")
	proto.RegisterType((*TxOper)(nil), "acca.TxOper")
	proto.RegisterMapType((map[string]string)(nil), "acca.TxOper.MetaEntry")
	proto.RegisterType((*Currency)(nil), "acca.Currency")
	proto.RegisterMapType((map[string]string)(nil), "acca.Currency.MetaEntry")
	proto.RegisterType((*BalanceShortInfo)(nil), "acca.BalanceShortInfo")
	proto.RegisterType((*Account)(nil), "acca.Account")
	proto.RegisterMapType((map[string]string)(nil), "acca.Account.MetaEntry")
	proto.RegisterType((*UserAccounts)(nil), "acca.UserAccounts")
	proto.RegisterEnum("acca.TxStatus", TxStatus_name, TxStatus_value)
	proto.RegisterEnum("acca.OperType", OperType_name, OperType_value)
}
func (m *Tx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TxId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.TxId))
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if len(m.Meta) > 0 {
		for k, _ := range m.Meta {
			dAtA[i] = 0x1a
			i++
			v := m.Meta[k]
			mapSize := 1 + len(k) + sovModels(uint64(len(k))) + 1 + len(v) + sovModels(uint64(len(v)))
			i = encodeVarintModels(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintModels(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintModels(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Status))
	}
	if len(m.Errm) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Errm)))
		i += copy(dAtA[i:], m.Errm)
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.UpdatedAt))
	}
	if len(m.Opers) > 0 {
		for _, msg := range m.Opers {
			dAtA[i] = 0x42
			i++
			i = encodeVarintModels(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RecentActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecentActivity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Id))
	}
	if m.OperId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.OperId))
	}
	if m.AccId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.AccId))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Amount))
	}
	if m.Balance != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Balance))
	}
	if len(m.MaBalances) > 0 {
		for _, msg := range m.MaBalances {
			dAtA[i] = 0x32
			i++
			i = encodeVarintModels(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TxId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.TxId))
	}
	if m.SrcAccId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.SrcAccId))
	}
	if m.DstAccId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.DstAccId))
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if len(m.TxReason) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.TxReason)))
		i += copy(dAtA[i:], m.TxReason)
	}
	if len(m.AccKey) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.AccKey)))
		i += copy(dAtA[i:], m.AccKey)
	}
	if m.AccCurrId != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.AccCurrId))
	}
	if len(m.AccCurrKey) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.AccCurrKey)))
		i += copy(dAtA[i:], m.AccCurrKey)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TxOper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxOper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SrcAccId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.SrcAccId))
	}
	if m.DstAccId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.DstAccId))
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Amount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Amount))
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if len(m.Meta) > 0 {
		for k, _ := range m.Meta {
			dAtA[i] = 0x32
			i++
			v := m.Meta[k]
			mapSize := 1 + len(k) + sovModels(uint64(len(k))) + 1 + len(v) + sovModels(uint64(len(v)))
			i = encodeVarintModels(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintModels(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintModels(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Hold {
		dAtA[i] = 0x38
		i++
		if m.Hold {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HoldAccId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.HoldAccId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Currency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Currency) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.CurrId))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Meta) > 0 {
		for k, _ := range m.Meta {
			dAtA[i] = 0x1a
			i++
			v := m.Meta[k]
			mapSize := 1 + len(k) + sovModels(uint64(len(k))) + 1 + len(v) + sovModels(uint64(len(v)))
			i = encodeVarintModels(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintModels(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintModels(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BalanceShortInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceShortInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Balance != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Balance))
	}
	if m.AccId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.AccId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AccId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.AccId))
	}
	if m.CurrId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.CurrId))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Balance != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Balance))
	}
	if len(m.Meta) > 0 {
		for k, _ := range m.Meta {
			dAtA[i] = 0x2a
			i++
			v := m.Meta[k]
			mapSize := 1 + len(k) + sovModels(uint64(len(k))) + 1 + len(v) + sovModels(uint64(len(v)))
			i = encodeVarintModels(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintModels(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintModels(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Curr != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Curr.Size()))
		n1, err := m.Curr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserAccounts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAccounts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.Balances) > 0 {
		for _, msg := range m.Balances {
			dAtA[i] = 0x12
			i++
			i = encodeVarintModels(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintModels(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Tx) Size() (n int) {
	var l int
	_ = l
	if m.TxId != 0 {
		n += 1 + sovModels(uint64(m.TxId))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if len(m.Meta) > 0 {
		for k, v := range m.Meta {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovModels(uint64(len(k))) + 1 + len(v) + sovModels(uint64(len(v)))
			n += mapEntrySize + 1 + sovModels(uint64(mapEntrySize))
		}
	}
	if m.Status != 0 {
		n += 1 + sovModels(uint64(m.Status))
	}
	l = len(m.Errm)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovModels(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovModels(uint64(m.UpdatedAt))
	}
	if len(m.Opers) > 0 {
		for _, e := range m.Opers {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecentActivity) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovModels(uint64(m.Id))
	}
	if m.OperId != 0 {
		n += 1 + sovModels(uint64(m.OperId))
	}
	if m.AccId != 0 {
		n += 1 + sovModels(uint64(m.AccId))
	}
	if m.Amount != 0 {
		n += 1 + sovModels(uint64(m.Amount))
	}
	if m.Balance != 0 {
		n += 1 + sovModels(uint64(m.Balance))
	}
	if len(m.MaBalances) > 0 {
		for _, e := range m.MaBalances {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	if m.TxId != 0 {
		n += 1 + sovModels(uint64(m.TxId))
	}
	if m.SrcAccId != 0 {
		n += 1 + sovModels(uint64(m.SrcAccId))
	}
	if m.DstAccId != 0 {
		n += 1 + sovModels(uint64(m.DstAccId))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.TxReason)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.AccKey)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.AccCurrId != 0 {
		n += 1 + sovModels(uint64(m.AccCurrId))
	}
	l = len(m.AccCurrKey)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TxOper) Size() (n int) {
	var l int
	_ = l
	if m.SrcAccId != 0 {
		n += 1 + sovModels(uint64(m.SrcAccId))
	}
	if m.DstAccId != 0 {
		n += 1 + sovModels(uint64(m.DstAccId))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovModels(uint64(m.Amount))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if len(m.Meta) > 0 {
		for k, v := range m.Meta {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovModels(uint64(len(k))) + 1 + len(v) + sovModels(uint64(len(v)))
			n += mapEntrySize + 1 + sovModels(uint64(mapEntrySize))
		}
	}
	if m.Hold {
		n += 2
	}
	if m.HoldAccId != 0 {
		n += 1 + sovModels(uint64(m.HoldAccId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Currency) Size() (n int) {
	var l int
	_ = l
	if m.CurrId != 0 {
		n += 1 + sovModels(uint64(m.CurrId))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if len(m.Meta) > 0 {
		for k, v := range m.Meta {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovModels(uint64(len(k))) + 1 + len(v) + sovModels(uint64(len(v)))
			n += mapEntrySize + 1 + sovModels(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BalanceShortInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.Balance != 0 {
		n += 1 + sovModels(uint64(m.Balance))
	}
	if m.AccId != 0 {
		n += 1 + sovModels(uint64(m.AccId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Account) Size() (n int) {
	var l int
	_ = l
	if m.AccId != 0 {
		n += 1 + sovModels(uint64(m.AccId))
	}
	if m.CurrId != 0 {
		n += 1 + sovModels(uint64(m.CurrId))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.Balance != 0 {
		n += 1 + sovModels(uint64(m.Balance))
	}
	if len(m.Meta) > 0 {
		for k, v := range m.Meta {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovModels(uint64(len(k))) + 1 + len(v) + sovModels(uint64(len(v)))
			n += mapEntrySize + 1 + sovModels(uint64(mapEntrySize))
		}
	}
	if m.Curr != nil {
		l = m.Curr.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserAccounts) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovModels(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			m.TxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthModels
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthModels
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipModels(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthModels
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Meta[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (TxStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opers = append(m.Opers, &TxOper{})
			if err := m.Opers[len(m.Opers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecentActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecentActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecentActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperId", wireType)
			}
			m.OperId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccId", wireType)
			}
			m.AccId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaBalances = append(m.MaBalances, &BalanceShortInfo{})
			if err := m.MaBalances[len(m.MaBalances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			m.TxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcAccId", wireType)
			}
			m.SrcAccId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcAccId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstAccId", wireType)
			}
			m.DstAccId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstAccId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccCurrId", wireType)
			}
			m.AccCurrId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccCurrId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccCurrKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccCurrKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxOper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxOper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxOper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcAccId", wireType)
			}
			m.SrcAccId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcAccId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstAccId", wireType)
			}
			m.DstAccId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstAccId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthModels
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthModels
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipModels(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthModels
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Meta[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hold", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hold = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldAccId", wireType)
			}
			m.HoldAccId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoldAccId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Currency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Currency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Currency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrId", wireType)
			}
			m.CurrId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthModels
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthModels
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipModels(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthModels
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Meta[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalanceShortInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceShortInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceShortInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccId", wireType)
			}
			m.AccId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccId", wireType)
			}
			m.AccId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrId", wireType)
			}
			m.CurrId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthModels
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthModels
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipModels(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthModels
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Meta[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Curr == nil {
				m.Curr = &Currency{}
			}
			if err := m.Curr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserAccounts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAccounts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAccounts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, &BalanceShortInfo{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthModels
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModels
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModels(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModels = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModels   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api/acca/models.proto", fileDescriptor_models_26c0dcbc37c6fa9d) }

var fileDescriptor_models_26c0dcbc37c6fa9d = []byte{
	// 886 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcb, 0x6e, 0xdb, 0x46,
	0x14, 0x35, 0x9f, 0x22, 0xaf, 0x54, 0x81, 0x98, 0x26, 0x31, 0x9b, 0x3a, 0xb2, 0xa0, 0x45, 0x60,
	0xb8, 0xad, 0x0c, 0xb8, 0x8b, 0x14, 0xdd, 0x51, 0x8f, 0xd4, 0xaa, 0x53, 0xb9, 0x18, 0xd3, 0xf0,
	0xa2, 0x0b, 0x61, 0x34, 0x9c, 0xd8, 0x42, 0x2d, 0x51, 0x20, 0x87, 0x81, 0xf4, 0x27, 0x5d, 0xf4,
	0x0f, 0xba, 0xe9, 0xb2, 0x9f, 0xd0, 0x65, 0xbf, 0xc0, 0x28, 0x9c, 0x9d, 0x37, 0xfd, 0x85, 0x62,
	0x1e, 0xd4, 0xc3, 0x69, 0xb3, 0x48, 0x36, 0xf6, 0xdc, 0x7b, 0x38, 0xf7, 0x71, 0xce, 0xdc, 0x2b,
	0x78, 0x4c, 0xe6, 0x93, 0x23, 0x42, 0x29, 0x39, 0x9a, 0xa6, 0x09, 0xbb, 0xc9, 0xdb, 0xf3, 0x2c,
	0xe5, 0x29, 0xb2, 0x85, 0xeb, 0xe9, 0x57, 0x57, 0x13, 0x7e, 0x5d, 0x8c, 0xdb, 0x34, 0x9d, 0x1e,
	0x5d, 0xa5, 0x57, 0xe9, 0x91, 0x04, 0xc7, 0xc5, 0x6b, 0x69, 0x49, 0x43, 0x9e, 0xd4, 0xa5, 0xd6,
	0xef, 0x26, 0x98, 0xf1, 0x02, 0x7d, 0x0a, 0x0e, 0x5f, 0x8c, 0x26, 0x49, 0x68, 0x34, 0x8d, 0x03,
	0x0b, 0xdb, 0x7c, 0x31, 0x48, 0xd0, 0x13, 0x70, 0x33, 0x46, 0xf2, 0x74, 0x16, 0x9a, 0x4d, 0xe3,
	0xc0, 0xc7, 0xda, 0x42, 0xcf, 0xc1, 0x9e, 0x32, 0x4e, 0x42, 0xab, 0x69, 0x1d, 0x54, 0x8f, 0x51,
	0x5b, 0xe4, 0x6d, 0xc7, 0x8b, 0xf6, 0x0f, 0x8c, 0x93, 0xfe, 0x8c, 0x67, 0x4b, 0x2c, 0x71, 0xf4,
	0x1c, 0xdc, 0x9c, 0x13, 0x5e, 0xe4, 0xa1, 0xdd, 0x34, 0x0e, 0xea, 0xc7, 0xf5, 0xf2, 0xcb, 0x73,
	0xe9, 0xc5, 0x1a, 0x45, 0x08, 0x6c, 0x96, 0x65, 0xd3, 0xd0, 0x91, 0x59, 0xe4, 0x19, 0x3d, 0x03,
	0xa0, 0x19, 0x23, 0x9c, 0x25, 0x23, 0xc2, 0x43, 0x57, 0x56, 0xe5, 0x6b, 0x4f, 0xc4, 0x05, 0x5c,
	0xcc, 0x93, 0x12, 0xae, 0x28, 0x58, 0x7b, 0x22, 0x8e, 0x5a, 0xe0, 0xa4, 0x73, 0x96, 0xe5, 0xa1,
	0x27, 0x4b, 0xac, 0x95, 0x89, 0xcf, 0xe6, 0x2c, 0xc3, 0x0a, 0x7a, 0xfa, 0x02, 0xfc, 0x55, 0xc1,
	0x28, 0x00, 0xeb, 0x67, 0xb6, 0x94, 0xdd, 0xfb, 0x58, 0x1c, 0xd1, 0x23, 0x70, 0xde, 0x90, 0x9b,
	0x82, 0xe9, 0xde, 0x95, 0xf1, 0xad, 0xf9, 0x8d, 0xd1, 0xfa, 0xd5, 0x82, 0x3a, 0x66, 0x94, 0xcd,
	0x78, 0x44, 0xf9, 0xe4, 0xcd, 0x84, 0x2f, 0x51, 0x1d, 0xcc, 0x15, 0x77, 0xe6, 0x24, 0x41, 0xbb,
	0x50, 0x11, 0x49, 0x04, 0xa1, 0xa6, 0x74, 0xba, 0xc2, 0x1c, 0x24, 0xe8, 0x31, 0xb8, 0x84, 0x52,
	0xe1, 0xb7, 0xa4, 0xdf, 0x21, 0x94, 0x2a, 0xa6, 0xc9, 0x34, 0x2d, 0x66, 0x5c, 0x32, 0x65, 0x61,
	0x6d, 0xa1, 0x10, 0x2a, 0x63, 0x72, 0x43, 0x66, 0x94, 0x49, 0x72, 0x2c, 0x5c, 0x9a, 0xe8, 0x05,
	0x54, 0xa7, 0x64, 0xa4, 0xad, 0x3c, 0x74, 0x65, 0x9f, 0x4f, 0x54, 0x9f, 0x1d, 0xe5, 0x3d, 0xbf,
	0x4e, 0x33, 0x3e, 0x98, 0xbd, 0x4e, 0x31, 0x4c, 0x89, 0xf6, 0xe5, 0x6b, 0xa5, 0x2b, 0x1b, 0x4a,
	0xef, 0x01, 0xe4, 0x19, 0x1d, 0xe9, 0xd2, 0x3c, 0x89, 0x78, 0x79, 0x46, 0x23, 0x59, 0xdd, 0x1e,
	0x40, 0x92, 0xf3, 0x12, 0xf5, 0x15, 0x9a, 0xe4, 0x3c, 0x2a, 0x6b, 0xd7, 0xaf, 0x04, 0xb6, 0x5e,
	0xc9, 0xe7, 0xe0, 0xf3, 0xc5, 0x48, 0x43, 0x55, 0x09, 0x79, 0x7c, 0x81, 0x15, 0xb8, 0x0b, 0x15,
	0x11, 0x4e, 0x70, 0x5e, 0x53, 0xb7, 0x08, 0xa5, 0xa7, 0x6c, 0x89, 0x1a, 0x50, 0x15, 0x00, 0x2d,
	0x32, 0xc9, 0xde, 0x27, 0x4a, 0x59, 0x42, 0x69, 0xb7, 0xc8, 0x04, 0x81, 0x4d, 0xa8, 0xad, 0x70,
	0x71, 0xbb, 0x2e, 0x6f, 0x83, 0xfe, 0xe0, 0x94, 0x2d, 0x5b, 0xbf, 0x99, 0xe0, 0x2a, 0xa5, 0x1f,
	0xb4, 0x65, 0xbc, 0xb7, 0x2d, 0xf3, 0x41, 0x5b, 0x08, 0x6c, 0xbe, 0x9c, 0x33, 0xa9, 0x93, 0x8f,
	0xe5, 0xf9, 0x7f, 0x65, 0x5a, 0x53, 0xe0, 0x6c, 0x51, 0x70, 0xa8, 0x07, 0x65, 0x4b, 0x1d, 0x55,
	0xdb, 0x3b, 0xc3, 0xb2, 0x07, 0xf6, 0x75, 0x7a, 0xa3, 0x64, 0xf1, 0x3a, 0xde, 0xfd, 0xed, 0xbe,
	0xb4, 0xb1, 0xfc, 0x2b, 0x68, 0x11, 0xff, 0xb7, 0x15, 0xf2, 0x85, 0x4b, 0x56, 0xfb, 0x11, 0x8f,
	0xd9, 0x00, 0x4f, 0x30, 0xc7, 0x66, 0x74, 0x29, 0x54, 0x29, 0x89, 0x57, 0x64, 0xb9, 0x54, 0xb1,
	0xae, 0x23, 0x9a, 0xeb, 0x88, 0x5f, 0x6e, 0xed, 0x80, 0x50, 0xb5, 0x56, 0x06, 0x7a, 0xd8, 0xdc,
	0x87, 0x97, 0x37, 0x85, 0xe0, 0xe1, 0x6b, 0x46, 0x9f, 0x69, 0x65, 0x64, 0x80, 0x8e, 0x73, 0x7f,
	0xbb, 0x6f, 0x70, 0x2d, 0xd0, 0xfe, 0x7a, 0x5e, 0xa4, 0x9e, 0x0a, 0x1d, 0xaf, 0xc7, 0xe6, 0xd9,
	0xf6, 0xfc, 0x75, 0xdc, 0xfb, 0xdb, 0x7d, 0x73, 0x92, 0xe8, 0x39, 0x6c, 0xfd, 0x63, 0x40, 0x25,
	0xa2, 0x54, 0x8a, 0xba, 0x1e, 0x55, 0x63, 0x73, 0x54, 0x37, 0x38, 0x32, 0xff, 0x8b, 0x23, 0x6b,
	0xdd, 0xd6, 0xc6, 0xf4, 0xda, 0xdb, 0xd3, 0xfb, 0x85, 0x66, 0xcf, 0x91, 0xec, 0xed, 0x2a, 0xf6,
	0x74, 0xe2, 0x77, 0x5e, 0x46, 0x0b, 0x6c, 0x91, 0x42, 0x2e, 0xc1, 0x6a, 0xb9, 0x44, 0x4b, 0xaa,
	0xb1, 0xc4, 0x3e, 0x9c, 0xe0, 0x9f, 0xa0, 0x76, 0x91, 0xb3, 0x4c, 0xe7, 0xce, 0x45, 0x7b, 0x45,
	0xce, 0x56, 0x4f, 0xc0, 0xc7, 0xae, 0x30, 0x07, 0x09, 0x3a, 0x06, 0x6f, 0xb5, 0x6d, 0xcc, 0xf7,
	0x6e, 0x9b, 0xd5, 0x77, 0x87, 0x97, 0xe0, 0x95, 0xcb, 0x1e, 0xd5, 0x01, 0x2e, 0x86, 0xa7, 0xc3,
	0xb3, 0xcb, 0xe1, 0x28, 0x3e, 0x0f, 0x76, 0x90, 0x0f, 0x4e, 0x0f, 0x47, 0x2f, 0xe3, 0xc0, 0x40,
	0x1e, 0xd8, 0xd1, 0x45, 0x7c, 0x12, 0x98, 0xa8, 0x06, 0x5e, 0xd4, 0xed, 0xf6, 0x7f, 0x8c, 0xfb,
	0xbd, 0xc0, 0x12, 0x16, 0xee, 0x7f, 0xdf, 0xef, 0x0a, 0xcb, 0x46, 0x00, 0xee, 0xcb, 0x68, 0xf0,
	0xaa, 0xdf, 0x0b, 0x9c, 0xc3, 0x1e, 0x78, 0x62, 0x88, 0x62, 0xa1, 0xf9, 0x46, 0xe0, 0xb3, 0x38,
	0xd8, 0x11, 0xb7, 0x06, 0xc3, 0xb8, 0x8f, 0x87, 0xd1, 0xab, 0xc0, 0x50, 0x31, 0xba, 0x27, 0x11,
	0xfe, 0xae, 0xaf, 0xe2, 0x5f, 0x0e, 0xe2, 0x93, 0x1e, 0x8e, 0x2e, 0x03, 0xab, 0xf3, 0xe8, 0xcf,
	0xbb, 0x86, 0xf1, 0xd7, 0x5d, 0xc3, 0xf8, 0xfb, 0xae, 0x61, 0xfc, 0xf2, 0xb6, 0xb1, 0xf3, 0xc7,
	0xdb, 0x86, 0x31, 0x76, 0xe5, 0x0f, 0xe3, 0xd7, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x45,
	0x96, 0x2c, 0x66, 0x07, 0x00, 0x00,
}
