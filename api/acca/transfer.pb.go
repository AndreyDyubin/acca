// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/acca/transfer.proto

package acca

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetTxByIDRequest struct {
	TxId                 int64    `protobuf:"varint,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	WithOpers            bool     `protobuf:"varint,2,opt,name=with_opers,json=withOpers,proto3" json:"with_opers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTxByIDRequest) Reset()         { *m = GetTxByIDRequest{} }
func (m *GetTxByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetTxByIDRequest) ProtoMessage()    {}
func (*GetTxByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_053c3fb7094ccd59, []int{0}
}
func (m *GetTxByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTxByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTxByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetTxByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTxByIDRequest.Merge(dst, src)
}
func (m *GetTxByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTxByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTxByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTxByIDRequest proto.InternalMessageInfo

func (m *GetTxByIDRequest) GetTxId() int64 {
	if m != nil {
		return m.TxId
	}
	return 0
}

func (m *GetTxByIDRequest) GetWithOpers() bool {
	if m != nil {
		return m.WithOpers
	}
	return false
}

type GetTxByIDResponse struct {
	Tx                   *Tx      `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
	Opers                []*Oper  `protobuf:"bytes,2,rep,name=opers" json:"opers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTxByIDResponse) Reset()         { *m = GetTxByIDResponse{} }
func (m *GetTxByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetTxByIDResponse) ProtoMessage()    {}
func (*GetTxByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_053c3fb7094ccd59, []int{1}
}
func (m *GetTxByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTxByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTxByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetTxByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTxByIDResponse.Merge(dst, src)
}
func (m *GetTxByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTxByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTxByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTxByIDResponse proto.InternalMessageInfo

func (m *GetTxByIDResponse) GetTx() *Tx {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *GetTxByIDResponse) GetOpers() []*Oper {
	if m != nil {
		return m.Opers
	}
	return nil
}

type RecentActivityRequest struct {
	LastId               int64    `protobuf:"varint,1,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecentActivityRequest) Reset()         { *m = RecentActivityRequest{} }
func (m *RecentActivityRequest) String() string { return proto.CompactTextString(m) }
func (*RecentActivityRequest) ProtoMessage()    {}
func (*RecentActivityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_053c3fb7094ccd59, []int{2}
}
func (m *RecentActivityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecentActivityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecentActivityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RecentActivityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecentActivityRequest.Merge(dst, src)
}
func (m *RecentActivityRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecentActivityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecentActivityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecentActivityRequest proto.InternalMessageInfo

func (m *RecentActivityRequest) GetLastId() int64 {
	if m != nil {
		return m.LastId
	}
	return 0
}

func (m *RecentActivityRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type RecentActivityResponse struct {
	List                 []*RecentActivity `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RecentActivityResponse) Reset()         { *m = RecentActivityResponse{} }
func (m *RecentActivityResponse) String() string { return proto.CompactTextString(m) }
func (*RecentActivityResponse) ProtoMessage()    {}
func (*RecentActivityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_053c3fb7094ccd59, []int{3}
}
func (m *RecentActivityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecentActivityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecentActivityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RecentActivityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecentActivityResponse.Merge(dst, src)
}
func (m *RecentActivityResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecentActivityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecentActivityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecentActivityResponse proto.InternalMessageInfo

func (m *RecentActivityResponse) GetList() []*RecentActivity {
	if m != nil {
		return m.List
	}
	return nil
}

type JournalActivityRequest struct {
	LastId               int64    `protobuf:"varint,1,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JournalActivityRequest) Reset()         { *m = JournalActivityRequest{} }
func (m *JournalActivityRequest) String() string { return proto.CompactTextString(m) }
func (*JournalActivityRequest) ProtoMessage()    {}
func (*JournalActivityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_053c3fb7094ccd59, []int{4}
}
func (m *JournalActivityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JournalActivityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JournalActivityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JournalActivityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JournalActivityRequest.Merge(dst, src)
}
func (m *JournalActivityRequest) XXX_Size() int {
	return m.Size()
}
func (m *JournalActivityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JournalActivityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JournalActivityRequest proto.InternalMessageInfo

func (m *JournalActivityRequest) GetLastId() int64 {
	if m != nil {
		return m.LastId
	}
	return 0
}

func (m *JournalActivityRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type JournalActivityResponse struct {
	List                 []*RecentActivity `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *JournalActivityResponse) Reset()         { *m = JournalActivityResponse{} }
func (m *JournalActivityResponse) String() string { return proto.CompactTextString(m) }
func (*JournalActivityResponse) ProtoMessage()    {}
func (*JournalActivityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_053c3fb7094ccd59, []int{5}
}
func (m *JournalActivityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JournalActivityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JournalActivityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JournalActivityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JournalActivityResponse.Merge(dst, src)
}
func (m *JournalActivityResponse) XXX_Size() int {
	return m.Size()
}
func (m *JournalActivityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JournalActivityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JournalActivityResponse proto.InternalMessageInfo

func (m *JournalActivityResponse) GetList() []*RecentActivity {
	if m != nil {
		return m.List
	}
	return nil
}

type NewTransferRequest struct {
	Opers                []*TxOper         `protobuf:"bytes,1,rep,name=opers" json:"opers,omitempty"`
	Meta                 map[string]string `protobuf:"bytes,2,rep,name=meta" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Reason               string            `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NewTransferRequest) Reset()         { *m = NewTransferRequest{} }
func (m *NewTransferRequest) String() string { return proto.CompactTextString(m) }
func (*NewTransferRequest) ProtoMessage()    {}
func (*NewTransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_053c3fb7094ccd59, []int{6}
}
func (m *NewTransferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewTransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewTransferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NewTransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewTransferRequest.Merge(dst, src)
}
func (m *NewTransferRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewTransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewTransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewTransferRequest proto.InternalMessageInfo

func (m *NewTransferRequest) GetOpers() []*TxOper {
	if m != nil {
		return m.Opers
	}
	return nil
}

func (m *NewTransferRequest) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *NewTransferRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type NewTransferResponse struct {
	TxId                 int64    `protobuf:"varint,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewTransferResponse) Reset()         { *m = NewTransferResponse{} }
func (m *NewTransferResponse) String() string { return proto.CompactTextString(m) }
func (*NewTransferResponse) ProtoMessage()    {}
func (*NewTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_053c3fb7094ccd59, []int{7}
}
func (m *NewTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NewTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewTransferResponse.Merge(dst, src)
}
func (m *NewTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewTransferResponse proto.InternalMessageInfo

func (m *NewTransferResponse) GetTxId() int64 {
	if m != nil {
		return m.TxId
	}
	return 0
}

type AcceptTxRequest struct {
	TxId                 int64    `protobuf:"varint,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AcceptTxRequest) Reset()         { *m = AcceptTxRequest{} }
func (m *AcceptTxRequest) String() string { return proto.CompactTextString(m) }
func (*AcceptTxRequest) ProtoMessage()    {}
func (*AcceptTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_053c3fb7094ccd59, []int{8}
}
func (m *AcceptTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcceptTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcceptTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AcceptTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptTxRequest.Merge(dst, src)
}
func (m *AcceptTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *AcceptTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptTxRequest proto.InternalMessageInfo

func (m *AcceptTxRequest) GetTxId() int64 {
	if m != nil {
		return m.TxId
	}
	return 0
}

type AcceptTxResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AcceptTxResponse) Reset()         { *m = AcceptTxResponse{} }
func (m *AcceptTxResponse) String() string { return proto.CompactTextString(m) }
func (*AcceptTxResponse) ProtoMessage()    {}
func (*AcceptTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_053c3fb7094ccd59, []int{9}
}
func (m *AcceptTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcceptTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcceptTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AcceptTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptTxResponse.Merge(dst, src)
}
func (m *AcceptTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *AcceptTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptTxResponse proto.InternalMessageInfo

type RejectTxRequest struct {
	TxId                 int64    `protobuf:"varint,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RejectTxRequest) Reset()         { *m = RejectTxRequest{} }
func (m *RejectTxRequest) String() string { return proto.CompactTextString(m) }
func (*RejectTxRequest) ProtoMessage()    {}
func (*RejectTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_053c3fb7094ccd59, []int{10}
}
func (m *RejectTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RejectTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RejectTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RejectTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RejectTxRequest.Merge(dst, src)
}
func (m *RejectTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *RejectTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RejectTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RejectTxRequest proto.InternalMessageInfo

func (m *RejectTxRequest) GetTxId() int64 {
	if m != nil {
		return m.TxId
	}
	return 0
}

type RejectTxResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RejectTxResponse) Reset()         { *m = RejectTxResponse{} }
func (m *RejectTxResponse) String() string { return proto.CompactTextString(m) }
func (*RejectTxResponse) ProtoMessage()    {}
func (*RejectTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_053c3fb7094ccd59, []int{11}
}
func (m *RejectTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RejectTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RejectTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RejectTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RejectTxResponse.Merge(dst, src)
}
func (m *RejectTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *RejectTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RejectTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RejectTxResponse proto.InternalMessageInfo

type RollbackTxRequest struct {
	TxId                 int64    `protobuf:"varint,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RollbackTxRequest) Reset()         { *m = RollbackTxRequest{} }
func (m *RollbackTxRequest) String() string { return proto.CompactTextString(m) }
func (*RollbackTxRequest) ProtoMessage()    {}
func (*RollbackTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_053c3fb7094ccd59, []int{12}
}
func (m *RollbackTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollbackTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollbackTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RollbackTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollbackTxRequest.Merge(dst, src)
}
func (m *RollbackTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *RollbackTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RollbackTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RollbackTxRequest proto.InternalMessageInfo

func (m *RollbackTxRequest) GetTxId() int64 {
	if m != nil {
		return m.TxId
	}
	return 0
}

type RollbackTxResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RollbackTxResponse) Reset()         { *m = RollbackTxResponse{} }
func (m *RollbackTxResponse) String() string { return proto.CompactTextString(m) }
func (*RollbackTxResponse) ProtoMessage()    {}
func (*RollbackTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_053c3fb7094ccd59, []int{13}
}
func (m *RollbackTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollbackTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollbackTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RollbackTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollbackTxResponse.Merge(dst, src)
}
func (m *RollbackTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *RollbackTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RollbackTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RollbackTxResponse proto.InternalMessageInfo

type HandleRequestsRequest struct {
	Limit                int64    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HandleRequestsRequest) Reset()         { *m = HandleRequestsRequest{} }
func (m *HandleRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*HandleRequestsRequest) ProtoMessage()    {}
func (*HandleRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_053c3fb7094ccd59, []int{14}
}
func (m *HandleRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HandleRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HandleRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HandleRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandleRequestsRequest.Merge(dst, src)
}
func (m *HandleRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *HandleRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HandleRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HandleRequestsRequest proto.InternalMessageInfo

func (m *HandleRequestsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type HandleRequestsResponse struct {
	NumOk                int64    `protobuf:"varint,1,opt,name=num_ok,json=numOk,proto3" json:"num_ok,omitempty"`
	NumErr               int64    `protobuf:"varint,2,opt,name=num_err,json=numErr,proto3" json:"num_err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HandleRequestsResponse) Reset()         { *m = HandleRequestsResponse{} }
func (m *HandleRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*HandleRequestsResponse) ProtoMessage()    {}
func (*HandleRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_053c3fb7094ccd59, []int{15}
}
func (m *HandleRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HandleRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HandleRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HandleRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandleRequestsResponse.Merge(dst, src)
}
func (m *HandleRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *HandleRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HandleRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HandleRequestsResponse proto.InternalMessageInfo

func (m *HandleRequestsResponse) GetNumOk() int64 {
	if m != nil {
		return m.NumOk
	}
	return 0
}

func (m *HandleRequestsResponse) GetNumErr() int64 {
	if m != nil {
		return m.NumErr
	}
	return 0
}

type GetUpdatesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUpdatesRequest) Reset()         { *m = GetUpdatesRequest{} }
func (m *GetUpdatesRequest) String() string { return proto.CompactTextString(m) }
func (*GetUpdatesRequest) ProtoMessage()    {}
func (*GetUpdatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_053c3fb7094ccd59, []int{16}
}
func (m *GetUpdatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUpdatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUpdatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetUpdatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUpdatesRequest.Merge(dst, src)
}
func (m *GetUpdatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUpdatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUpdatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUpdatesRequest proto.InternalMessageInfo

type Update struct {
	// Types that are valid to be assigned to Type:
	//	*Update_OperStatus
	//	*Update_TxStatus
	Type                 isUpdate_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Update) Reset()         { *m = Update{} }
func (m *Update) String() string { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()    {}
func (*Update) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_053c3fb7094ccd59, []int{17}
}
func (m *Update) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Update) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Update.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Update) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update.Merge(dst, src)
}
func (m *Update) XXX_Size() int {
	return m.Size()
}
func (m *Update) XXX_DiscardUnknown() {
	xxx_messageInfo_Update.DiscardUnknown(m)
}

var xxx_messageInfo_Update proto.InternalMessageInfo

type isUpdate_Type interface {
	isUpdate_Type()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Update_OperStatus struct {
	OperStatus *Update_OperUpdateStatus `protobuf:"bytes,1,opt,name=oper_status,json=operStatus,oneof"`
}
type Update_TxStatus struct {
	TxStatus *Update_TxUpdateStatus `protobuf:"bytes,2,opt,name=tx_status,json=txStatus,oneof"`
}

func (*Update_OperStatus) isUpdate_Type() {}
func (*Update_TxStatus) isUpdate_Type()   {}

func (m *Update) GetType() isUpdate_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Update) GetOperStatus() *Update_OperUpdateStatus {
	if x, ok := m.GetType().(*Update_OperStatus); ok {
		return x.OperStatus
	}
	return nil
}

func (m *Update) GetTxStatus() *Update_TxUpdateStatus {
	if x, ok := m.GetType().(*Update_TxStatus); ok {
		return x.TxStatus
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Update) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Update_OneofMarshaler, _Update_OneofUnmarshaler, _Update_OneofSizer, []interface{}{
		(*Update_OperStatus)(nil),
		(*Update_TxStatus)(nil),
	}
}

func _Update_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Update)
	// type
	switch x := m.Type.(type) {
	case *Update_OperStatus:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OperStatus); err != nil {
			return err
		}
	case *Update_TxStatus:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TxStatus); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Update.Type has unexpected type %T", x)
	}
	return nil
}

func _Update_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Update)
	switch tag {
	case 1: // type.oper_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Update_OperUpdateStatus)
		err := b.DecodeMessage(msg)
		m.Type = &Update_OperStatus{msg}
		return true, err
	case 2: // type.tx_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Update_TxUpdateStatus)
		err := b.DecodeMessage(msg)
		m.Type = &Update_TxStatus{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Update_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Update)
	// type
	switch x := m.Type.(type) {
	case *Update_OperStatus:
		s := proto.Size(x.OperStatus)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Update_TxStatus:
		s := proto.Size(x.TxStatus)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Update_OperUpdateStatus struct {
	OperId               int64    `protobuf:"varint,1,opt,name=oper_id,json=operId,proto3" json:"oper_id,omitempty"`
	SrcAccId             int64    `protobuf:"varint,2,opt,name=src_acc_id,json=srcAccId,proto3" json:"src_acc_id,omitempty"`
	DstAccId             int64    `protobuf:"varint,3,opt,name=dst_acc_id,json=dstAccId,proto3" json:"dst_acc_id,omitempty"`
	NewStatus            string   `protobuf:"bytes,4,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
	Amount               int64    `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Type                 string   `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	TxId                 int64    `protobuf:"varint,7,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Update_OperUpdateStatus) Reset()         { *m = Update_OperUpdateStatus{} }
func (m *Update_OperUpdateStatus) String() string { return proto.CompactTextString(m) }
func (*Update_OperUpdateStatus) ProtoMessage()    {}
func (*Update_OperUpdateStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_053c3fb7094ccd59, []int{17, 0}
}
func (m *Update_OperUpdateStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Update_OperUpdateStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Update_OperUpdateStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Update_OperUpdateStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update_OperUpdateStatus.Merge(dst, src)
}
func (m *Update_OperUpdateStatus) XXX_Size() int {
	return m.Size()
}
func (m *Update_OperUpdateStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_Update_OperUpdateStatus.DiscardUnknown(m)
}

var xxx_messageInfo_Update_OperUpdateStatus proto.InternalMessageInfo

func (m *Update_OperUpdateStatus) GetOperId() int64 {
	if m != nil {
		return m.OperId
	}
	return 0
}

func (m *Update_OperUpdateStatus) GetSrcAccId() int64 {
	if m != nil {
		return m.SrcAccId
	}
	return 0
}

func (m *Update_OperUpdateStatus) GetDstAccId() int64 {
	if m != nil {
		return m.DstAccId
	}
	return 0
}

func (m *Update_OperUpdateStatus) GetNewStatus() string {
	if m != nil {
		return m.NewStatus
	}
	return ""
}

func (m *Update_OperUpdateStatus) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Update_OperUpdateStatus) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Update_OperUpdateStatus) GetTxId() int64 {
	if m != nil {
		return m.TxId
	}
	return 0
}

type Update_TxUpdateStatus struct {
	TxId                 int64    `protobuf:"varint,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	NewStatus            string   `protobuf:"bytes,2,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Update_TxUpdateStatus) Reset()         { *m = Update_TxUpdateStatus{} }
func (m *Update_TxUpdateStatus) String() string { return proto.CompactTextString(m) }
func (*Update_TxUpdateStatus) ProtoMessage()    {}
func (*Update_TxUpdateStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_053c3fb7094ccd59, []int{17, 1}
}
func (m *Update_TxUpdateStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Update_TxUpdateStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Update_TxUpdateStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Update_TxUpdateStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update_TxUpdateStatus.Merge(dst, src)
}
func (m *Update_TxUpdateStatus) XXX_Size() int {
	return m.Size()
}
func (m *Update_TxUpdateStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_Update_TxUpdateStatus.DiscardUnknown(m)
}

var xxx_messageInfo_Update_TxUpdateStatus proto.InternalMessageInfo

func (m *Update_TxUpdateStatus) GetTxId() int64 {
	if m != nil {
		return m.TxId
	}
	return 0
}

func (m *Update_TxUpdateStatus) GetNewStatus() string {
	if m != nil {
		return m.NewStatus
	}
	return ""
}

func init() {
	proto.RegisterType((*GetTxByIDRequest)(nil), "acca.GetTxByIDRequest")
	proto.RegisterType((*GetTxByIDResponse)(nil), "acca.GetTxByIDResponse")
	proto.RegisterType((*RecentActivityRequest)(nil), "acca.RecentActivityRequest")
	proto.RegisterType((*RecentActivityResponse)(nil), "acca.RecentActivityResponse")
	proto.RegisterType((*JournalActivityRequest)(nil), "acca.JournalActivityRequest")
	proto.RegisterType((*JournalActivityResponse)(nil), "acca.JournalActivityResponse")
	proto.RegisterType((*NewTransferRequest)(nil), "acca.NewTransferRequest")
	proto.RegisterMapType((map[string]string)(nil), "acca.NewTransferRequest.MetaEntry")
	proto.RegisterType((*NewTransferResponse)(nil), "acca.NewTransferResponse")
	proto.RegisterType((*AcceptTxRequest)(nil), "acca.AcceptTxRequest")
	proto.RegisterType((*AcceptTxResponse)(nil), "acca.AcceptTxResponse")
	proto.RegisterType((*RejectTxRequest)(nil), "acca.RejectTxRequest")
	proto.RegisterType((*RejectTxResponse)(nil), "acca.RejectTxResponse")
	proto.RegisterType((*RollbackTxRequest)(nil), "acca.RollbackTxRequest")
	proto.RegisterType((*RollbackTxResponse)(nil), "acca.RollbackTxResponse")
	proto.RegisterType((*HandleRequestsRequest)(nil), "acca.HandleRequestsRequest")
	proto.RegisterType((*HandleRequestsResponse)(nil), "acca.HandleRequestsResponse")
	proto.RegisterType((*GetUpdatesRequest)(nil), "acca.GetUpdatesRequest")
	proto.RegisterType((*Update)(nil), "acca.Update")
	proto.RegisterType((*Update_OperUpdateStatus)(nil), "acca.Update.OperUpdateStatus")
	proto.RegisterType((*Update_TxUpdateStatus)(nil), "acca.Update.TxUpdateStatus")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Transfer service

type TransferClient interface {
	NewTransfer(ctx context.Context, in *NewTransferRequest, opts ...grpc.CallOption) (*NewTransferResponse, error)
	AcceptTx(ctx context.Context, in *AcceptTxRequest, opts ...grpc.CallOption) (*AcceptTxResponse, error)
	RejectTx(ctx context.Context, in *RejectTxRequest, opts ...grpc.CallOption) (*RejectTxResponse, error)
	RollbackTx(ctx context.Context, in *RollbackTxRequest, opts ...grpc.CallOption) (*RollbackTxResponse, error)
	HandleRequests(ctx context.Context, in *HandleRequestsRequest, opts ...grpc.CallOption) (*HandleRequestsResponse, error)
	GetUpdates(ctx context.Context, in *GetUpdatesRequest, opts ...grpc.CallOption) (Transfer_GetUpdatesClient, error)
	GetTxByID(ctx context.Context, in *GetTxByIDRequest, opts ...grpc.CallOption) (*GetTxByIDResponse, error)
	RecentActivity(ctx context.Context, in *RecentActivityRequest, opts ...grpc.CallOption) (*RecentActivityResponse, error)
	JournalActivity(ctx context.Context, in *JournalActivityRequest, opts ...grpc.CallOption) (*JournalActivityResponse, error)
}

type transferClient struct {
	cc *grpc.ClientConn
}

func NewTransferClient(cc *grpc.ClientConn) TransferClient {
	return &transferClient{cc}
}

func (c *transferClient) NewTransfer(ctx context.Context, in *NewTransferRequest, opts ...grpc.CallOption) (*NewTransferResponse, error) {
	out := new(NewTransferResponse)
	err := c.cc.Invoke(ctx, "/acca.Transfer/NewTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) AcceptTx(ctx context.Context, in *AcceptTxRequest, opts ...grpc.CallOption) (*AcceptTxResponse, error) {
	out := new(AcceptTxResponse)
	err := c.cc.Invoke(ctx, "/acca.Transfer/AcceptTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) RejectTx(ctx context.Context, in *RejectTxRequest, opts ...grpc.CallOption) (*RejectTxResponse, error) {
	out := new(RejectTxResponse)
	err := c.cc.Invoke(ctx, "/acca.Transfer/RejectTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) RollbackTx(ctx context.Context, in *RollbackTxRequest, opts ...grpc.CallOption) (*RollbackTxResponse, error) {
	out := new(RollbackTxResponse)
	err := c.cc.Invoke(ctx, "/acca.Transfer/RollbackTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) HandleRequests(ctx context.Context, in *HandleRequestsRequest, opts ...grpc.CallOption) (*HandleRequestsResponse, error) {
	out := new(HandleRequestsResponse)
	err := c.cc.Invoke(ctx, "/acca.Transfer/HandleRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) GetUpdates(ctx context.Context, in *GetUpdatesRequest, opts ...grpc.CallOption) (Transfer_GetUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Transfer_serviceDesc.Streams[0], "/acca.Transfer/GetUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &transferGetUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Transfer_GetUpdatesClient interface {
	Recv() (*Update, error)
	grpc.ClientStream
}

type transferGetUpdatesClient struct {
	grpc.ClientStream
}

func (x *transferGetUpdatesClient) Recv() (*Update, error) {
	m := new(Update)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transferClient) GetTxByID(ctx context.Context, in *GetTxByIDRequest, opts ...grpc.CallOption) (*GetTxByIDResponse, error) {
	out := new(GetTxByIDResponse)
	err := c.cc.Invoke(ctx, "/acca.Transfer/GetTxByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) RecentActivity(ctx context.Context, in *RecentActivityRequest, opts ...grpc.CallOption) (*RecentActivityResponse, error) {
	out := new(RecentActivityResponse)
	err := c.cc.Invoke(ctx, "/acca.Transfer/RecentActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) JournalActivity(ctx context.Context, in *JournalActivityRequest, opts ...grpc.CallOption) (*JournalActivityResponse, error) {
	out := new(JournalActivityResponse)
	err := c.cc.Invoke(ctx, "/acca.Transfer/JournalActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Transfer service

type TransferServer interface {
	NewTransfer(context.Context, *NewTransferRequest) (*NewTransferResponse, error)
	AcceptTx(context.Context, *AcceptTxRequest) (*AcceptTxResponse, error)
	RejectTx(context.Context, *RejectTxRequest) (*RejectTxResponse, error)
	RollbackTx(context.Context, *RollbackTxRequest) (*RollbackTxResponse, error)
	HandleRequests(context.Context, *HandleRequestsRequest) (*HandleRequestsResponse, error)
	GetUpdates(*GetUpdatesRequest, Transfer_GetUpdatesServer) error
	GetTxByID(context.Context, *GetTxByIDRequest) (*GetTxByIDResponse, error)
	RecentActivity(context.Context, *RecentActivityRequest) (*RecentActivityResponse, error)
	JournalActivity(context.Context, *JournalActivityRequest) (*JournalActivityResponse, error)
}

func RegisterTransferServer(s *grpc.Server, srv TransferServer) {
	s.RegisterService(&_Transfer_serviceDesc, srv)
}

func _Transfer_NewTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).NewTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acca.Transfer/NewTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).NewTransfer(ctx, req.(*NewTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_AcceptTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).AcceptTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acca.Transfer/AcceptTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).AcceptTx(ctx, req.(*AcceptTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_RejectTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).RejectTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acca.Transfer/RejectTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).RejectTx(ctx, req.(*RejectTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_RollbackTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).RollbackTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acca.Transfer/RollbackTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).RollbackTx(ctx, req.(*RollbackTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_HandleRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).HandleRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acca.Transfer/HandleRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).HandleRequests(ctx, req.(*HandleRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_GetUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransferServer).GetUpdates(m, &transferGetUpdatesServer{stream})
}

type Transfer_GetUpdatesServer interface {
	Send(*Update) error
	grpc.ServerStream
}

type transferGetUpdatesServer struct {
	grpc.ServerStream
}

func (x *transferGetUpdatesServer) Send(m *Update) error {
	return x.ServerStream.SendMsg(m)
}

func _Transfer_GetTxByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).GetTxByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acca.Transfer/GetTxByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).GetTxByID(ctx, req.(*GetTxByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_RecentActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).RecentActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acca.Transfer/RecentActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).RecentActivity(ctx, req.(*RecentActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_JournalActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JournalActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).JournalActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acca.Transfer/JournalActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).JournalActivity(ctx, req.(*JournalActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transfer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "acca.Transfer",
	HandlerType: (*TransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewTransfer",
			Handler:    _Transfer_NewTransfer_Handler,
		},
		{
			MethodName: "AcceptTx",
			Handler:    _Transfer_AcceptTx_Handler,
		},
		{
			MethodName: "RejectTx",
			Handler:    _Transfer_RejectTx_Handler,
		},
		{
			MethodName: "RollbackTx",
			Handler:    _Transfer_RollbackTx_Handler,
		},
		{
			MethodName: "HandleRequests",
			Handler:    _Transfer_HandleRequests_Handler,
		},
		{
			MethodName: "GetTxByID",
			Handler:    _Transfer_GetTxByID_Handler,
		},
		{
			MethodName: "RecentActivity",
			Handler:    _Transfer_RecentActivity_Handler,
		},
		{
			MethodName: "JournalActivity",
			Handler:    _Transfer_JournalActivity_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUpdates",
			Handler:       _Transfer_GetUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/acca/transfer.proto",
}

func (m *GetTxByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTxByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TxId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.TxId))
	}
	if m.WithOpers {
		dAtA[i] = 0x10
		i++
		if m.WithOpers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetTxByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTxByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tx != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.Tx.Size()))
		n1, err := m.Tx.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Opers) > 0 {
		for _, msg := range m.Opers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTransfer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RecentActivityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecentActivityRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LastId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.LastId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RecentActivityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecentActivityResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTransfer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *JournalActivityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JournalActivityRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LastId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.LastId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *JournalActivityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JournalActivityResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTransfer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewTransferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewTransferRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Opers) > 0 {
		for _, msg := range m.Opers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTransfer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Meta) > 0 {
		for k, _ := range m.Meta {
			dAtA[i] = 0x12
			i++
			v := m.Meta[k]
			mapSize := 1 + len(k) + sovTransfer(uint64(len(k))) + 1 + len(v) + sovTransfer(uint64(len(v)))
			i = encodeVarintTransfer(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTransfer(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTransfer(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TxId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.TxId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AcceptTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptTxRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TxId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.TxId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AcceptTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptTxResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RejectTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RejectTxRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TxId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.TxId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RejectTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RejectTxResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RollbackTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollbackTxRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TxId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.TxId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RollbackTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollbackTxResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HandleRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HandleRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumOk != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.NumOk))
	}
	if m.NumErr != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.NumErr))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetUpdatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUpdatesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Update) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Update) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		nn2, err := m.Type.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Update_OperStatus) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OperStatus != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.OperStatus.Size()))
		n3, err := m.OperStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Update_TxStatus) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TxStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.TxStatus.Size()))
		n4, err := m.TxStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Update_OperUpdateStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Update_OperUpdateStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OperId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.OperId))
	}
	if m.SrcAccId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.SrcAccId))
	}
	if m.DstAccId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.DstAccId))
	}
	if len(m.NewStatus) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.NewStatus)))
		i += copy(dAtA[i:], m.NewStatus)
	}
	if m.Amount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.Amount))
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.TxId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.TxId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Update_TxUpdateStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Update_TxUpdateStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TxId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.TxId))
	}
	if len(m.NewStatus) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.NewStatus)))
		i += copy(dAtA[i:], m.NewStatus)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTransfer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetTxByIDRequest) Size() (n int) {
	var l int
	_ = l
	if m.TxId != 0 {
		n += 1 + sovTransfer(uint64(m.TxId))
	}
	if m.WithOpers {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTxByIDResponse) Size() (n int) {
	var l int
	_ = l
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovTransfer(uint64(l))
	}
	if len(m.Opers) > 0 {
		for _, e := range m.Opers {
			l = e.Size()
			n += 1 + l + sovTransfer(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecentActivityRequest) Size() (n int) {
	var l int
	_ = l
	if m.LastId != 0 {
		n += 1 + sovTransfer(uint64(m.LastId))
	}
	if m.Limit != 0 {
		n += 1 + sovTransfer(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecentActivityResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovTransfer(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JournalActivityRequest) Size() (n int) {
	var l int
	_ = l
	if m.LastId != 0 {
		n += 1 + sovTransfer(uint64(m.LastId))
	}
	if m.Limit != 0 {
		n += 1 + sovTransfer(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JournalActivityResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovTransfer(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewTransferRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Opers) > 0 {
		for _, e := range m.Opers {
			l = e.Size()
			n += 1 + l + sovTransfer(uint64(l))
		}
	}
	if len(m.Meta) > 0 {
		for k, v := range m.Meta {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTransfer(uint64(len(k))) + 1 + len(v) + sovTransfer(uint64(len(v)))
			n += mapEntrySize + 1 + sovTransfer(uint64(mapEntrySize))
		}
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewTransferResponse) Size() (n int) {
	var l int
	_ = l
	if m.TxId != 0 {
		n += 1 + sovTransfer(uint64(m.TxId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AcceptTxRequest) Size() (n int) {
	var l int
	_ = l
	if m.TxId != 0 {
		n += 1 + sovTransfer(uint64(m.TxId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AcceptTxResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RejectTxRequest) Size() (n int) {
	var l int
	_ = l
	if m.TxId != 0 {
		n += 1 + sovTransfer(uint64(m.TxId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RejectTxResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RollbackTxRequest) Size() (n int) {
	var l int
	_ = l
	if m.TxId != 0 {
		n += 1 + sovTransfer(uint64(m.TxId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RollbackTxResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HandleRequestsRequest) Size() (n int) {
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovTransfer(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HandleRequestsResponse) Size() (n int) {
	var l int
	_ = l
	if m.NumOk != 0 {
		n += 1 + sovTransfer(uint64(m.NumOk))
	}
	if m.NumErr != 0 {
		n += 1 + sovTransfer(uint64(m.NumErr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUpdatesRequest) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Update) Size() (n int) {
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Update_OperStatus) Size() (n int) {
	var l int
	_ = l
	if m.OperStatus != nil {
		l = m.OperStatus.Size()
		n += 1 + l + sovTransfer(uint64(l))
	}
	return n
}
func (m *Update_TxStatus) Size() (n int) {
	var l int
	_ = l
	if m.TxStatus != nil {
		l = m.TxStatus.Size()
		n += 1 + l + sovTransfer(uint64(l))
	}
	return n
}
func (m *Update_OperUpdateStatus) Size() (n int) {
	var l int
	_ = l
	if m.OperId != 0 {
		n += 1 + sovTransfer(uint64(m.OperId))
	}
	if m.SrcAccId != 0 {
		n += 1 + sovTransfer(uint64(m.SrcAccId))
	}
	if m.DstAccId != 0 {
		n += 1 + sovTransfer(uint64(m.DstAccId))
	}
	l = len(m.NewStatus)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTransfer(uint64(m.Amount))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	if m.TxId != 0 {
		n += 1 + sovTransfer(uint64(m.TxId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Update_TxUpdateStatus) Size() (n int) {
	var l int
	_ = l
	if m.TxId != 0 {
		n += 1 + sovTransfer(uint64(m.TxId))
	}
	l = len(m.NewStatus)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTransfer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTransfer(x uint64) (n int) {
	return sovTransfer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetTxByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTxByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTxByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			m.TxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithOpers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithOpers = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTxByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTxByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTxByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &Tx{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opers = append(m.Opers, &Oper{})
			if err := m.Opers[len(m.Opers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecentActivityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecentActivityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecentActivityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastId", wireType)
			}
			m.LastId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecentActivityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecentActivityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecentActivityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RecentActivity{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JournalActivityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JournalActivityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JournalActivityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastId", wireType)
			}
			m.LastId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JournalActivityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JournalActivityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JournalActivityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RecentActivity{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewTransferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewTransferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewTransferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opers = append(m.Opers, &TxOper{})
			if err := m.Opers[len(m.Opers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTransfer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTransfer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTransfer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTransfer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTransfer
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTransfer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTransfer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Meta[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			m.TxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			m.TxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RejectTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RejectTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RejectTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			m.TxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RejectTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RejectTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RejectTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollbackTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollbackTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollbackTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			m.TxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollbackTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollbackTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollbackTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOk", wireType)
			}
			m.NumOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOk |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumErr", wireType)
			}
			m.NumErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumErr |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUpdatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUpdatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUpdatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Update) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Update: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Update: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Update_OperUpdateStatus{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Update_OperStatus{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Update_TxUpdateStatus{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Update_TxStatus{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Update_OperUpdateStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperUpdateStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperUpdateStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperId", wireType)
			}
			m.OperId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcAccId", wireType)
			}
			m.SrcAccId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcAccId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstAccId", wireType)
			}
			m.DstAccId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstAccId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			m.TxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Update_TxUpdateStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxUpdateStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxUpdateStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			m.TxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransfer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTransfer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTransfer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTransfer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTransfer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransfer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api/acca/transfer.proto", fileDescriptor_transfer_053c3fb7094ccd59) }

var fileDescriptor_transfer_053c3fb7094ccd59 = []byte{
	// 834 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0x8e, 0xf3, 0xe3, 0xc6, 0x27, 0x55, 0x9b, 0xce, 0x6e, 0x12, 0x63, 0x9a, 0x28, 0xf2, 0x05,
	0x8a, 0x90, 0x48, 0xd1, 0x22, 0x51, 0x54, 0x24, 0x44, 0xc2, 0xb6, 0xdd, 0x20, 0x95, 0x45, 0x26,
	0x5c, 0x47, 0xb3, 0xf6, 0x20, 0x4c, 0x1c, 0x3b, 0x78, 0x26, 0x1b, 0xe7, 0x4d, 0xb8, 0xe2, 0x5d,
	0xb8, 0x82, 0x4b, 0x1e, 0x01, 0x2d, 0xef, 0xc0, 0x35, 0x9a, 0xbf, 0xd8, 0x71, 0xb2, 0xfc, 0xa8,
	0x77, 0x33, 0xe7, 0x9c, 0xef, 0x9b, 0x6f, 0x8e, 0xcf, 0x97, 0x09, 0xf4, 0xf0, 0x3a, 0x7c, 0x86,
	0x7d, 0x1f, 0x3f, 0x63, 0x29, 0x8e, 0xe9, 0x77, 0x24, 0x1d, 0xaf, 0xd3, 0x84, 0x25, 0xa8, 0xce,
	0x83, 0x4e, 0x67, 0x9f, 0x5e, 0x25, 0x01, 0x89, 0xa8, 0x4c, 0xba, 0xaf, 0xa0, 0xfd, 0x9a, 0xb0,
	0x79, 0x36, 0xdd, 0xcd, 0x2e, 0x3d, 0xf2, 0xe3, 0x86, 0x50, 0x86, 0xce, 0xa0, 0xc1, 0xb2, 0x45,
	0x18, 0xd8, 0xc6, 0xd0, 0x18, 0xd5, 0xbc, 0x3a, 0xcb, 0x66, 0x01, 0xea, 0x03, 0x6c, 0x43, 0xf6,
	0xfd, 0x22, 0x59, 0x93, 0x94, 0xda, 0xd5, 0xa1, 0x31, 0x6a, 0x7a, 0x16, 0x8f, 0x5c, 0xf3, 0x80,
	0x7b, 0x0d, 0x4f, 0x0a, 0x3c, 0x74, 0x9d, 0xc4, 0x94, 0x20, 0x1b, 0xaa, 0x2c, 0x13, 0x2c, 0xad,
	0x8b, 0xe6, 0x98, 0x1f, 0x3e, 0x9e, 0x67, 0x5e, 0x95, 0x65, 0x68, 0x08, 0x0d, 0x4d, 0x54, 0x1b,
	0xb5, 0x2e, 0x40, 0x26, 0x39, 0x95, 0x27, 0x13, 0xee, 0x2b, 0xe8, 0x78, 0xc4, 0x27, 0x31, 0x9b,
	0xf8, 0x2c, 0xbc, 0x0d, 0xd9, 0x4e, 0xab, 0xeb, 0xc1, 0x83, 0x08, 0x53, 0x96, 0xeb, 0x33, 0xf9,
	0x76, 0x16, 0xa0, 0x73, 0x68, 0x44, 0xe1, 0x2a, 0x64, 0x42, 0x5c, 0xcd, 0x93, 0x1b, 0x77, 0x0a,
	0xdd, 0x32, 0x8f, 0x52, 0x37, 0x82, 0x7a, 0x14, 0x52, 0x66, 0x1b, 0x42, 0xc2, 0xb9, 0x94, 0x50,
	0xaa, 0x15, 0x15, 0xee, 0x6b, 0xe8, 0x7e, 0x99, 0x6c, 0xd2, 0x18, 0x47, 0x6f, 0x29, 0xe6, 0x0b,
	0xe8, 0x1d, 0x11, 0xfd, 0x6f, 0x35, 0xbf, 0x18, 0x80, 0xbe, 0x22, 0xdb, 0xb9, 0xfa, 0xca, 0x5a,
	0x8a, 0xab, 0x5b, 0x2a, 0x19, 0x1e, 0xea, 0x7e, 0x17, 0x9a, 0x8a, 0x3e, 0x86, 0xfa, 0x8a, 0x30,
	0xac, 0xba, 0xee, 0xca, 0x92, 0x63, 0xae, 0xf1, 0x1b, 0xc2, 0xf0, 0xcb, 0x98, 0xa5, 0x3b, 0x4f,
	0xd4, 0xa3, 0x2e, 0x98, 0x29, 0xc1, 0x34, 0x89, 0xed, 0xda, 0xd0, 0x18, 0x59, 0x9e, 0xda, 0x39,
	0xcf, 0xc1, 0xda, 0x97, 0xa2, 0x36, 0xd4, 0x96, 0x64, 0x27, 0xfa, 0x60, 0x79, 0x7c, 0xc9, 0x9b,
	0x70, 0x8b, 0xa3, 0x0d, 0x11, 0x4d, 0xb0, 0x3c, 0xb9, 0x79, 0x51, 0xfd, 0xc4, 0x70, 0xdf, 0x87,
	0xb3, 0x83, 0x63, 0x55, 0x13, 0x4e, 0x4d, 0x9e, 0xfb, 0x1e, 0x3c, 0x9e, 0xf8, 0x3e, 0x59, 0xb3,
	0x79, 0xf6, 0x4f, 0x13, 0xea, 0x22, 0x68, 0xe7, 0x75, 0x92, 0x90, 0x63, 0x3d, 0xf2, 0x03, 0xf1,
	0xff, 0x03, 0x36, 0xaf, 0x53, 0xd8, 0x11, 0x3c, 0xf1, 0x92, 0x28, 0xba, 0xc1, 0xfe, 0xf2, 0x5f,
	0xd0, 0xe7, 0x80, 0x8a, 0x95, 0x0a, 0xff, 0x01, 0x74, 0xae, 0x70, 0x1c, 0x44, 0x44, 0x61, 0xa9,
	0xe6, 0xd8, 0xcf, 0x86, 0x51, 0x9c, 0x8d, 0x2b, 0xe8, 0x96, 0xcb, 0x55, 0x57, 0x3a, 0x60, 0xc6,
	0x9b, 0xd5, 0x22, 0x59, 0x6a, 0x40, 0xbc, 0x59, 0x5d, 0x2f, 0xf9, 0xec, 0xf1, 0x30, 0x49, 0x53,
	0x35, 0x64, 0xbc, 0xea, 0x65, 0x9a, 0xba, 0x67, 0xc2, 0x8b, 0xdf, 0xae, 0x03, 0xcc, 0x88, 0x3e,
	0xd4, 0xfd, 0xb9, 0x06, 0xa6, 0x0c, 0xa1, 0xcf, 0xa1, 0xc5, 0xc7, 0x61, 0x41, 0x19, 0x66, 0x1b,
	0xaa, 0xfc, 0xd9, 0x97, 0xc3, 0x20, 0x4b, 0x84, 0x13, 0xe5, 0xf2, 0x1b, 0x51, 0x74, 0x55, 0xf1,
	0x80, 0x63, 0xe4, 0x0e, 0xbd, 0x00, 0x8b, 0x65, 0x1a, 0x5f, 0x15, 0xf8, 0x77, 0x0f, 0xf0, 0xf3,
	0xac, 0x84, 0x6e, 0xb2, 0x4c, 0xae, 0x9d, 0x5f, 0x0d, 0x68, 0x97, 0xe9, 0xf9, 0x5d, 0x84, 0xa4,
	0xdc, 0x47, 0x7c, 0x3b, 0x0b, 0xd0, 0x53, 0x00, 0x9a, 0xfa, 0x0b, 0xec, 0xfb, 0x3c, 0x27, 0xef,
	0xd9, 0xa4, 0xa9, 0x3f, 0xf1, 0x7d, 0x99, 0x0d, 0x28, 0xd3, 0xd9, 0x9a, 0xcc, 0x06, 0x94, 0xc9,
	0x6c, 0x1f, 0x20, 0x26, 0x5b, 0x2d, 0xb3, 0x2e, 0x66, 0xd0, 0x8a, 0xc9, 0x56, 0x9d, 0xd9, 0x05,
	0x13, 0xaf, 0x92, 0x4d, 0xcc, 0xec, 0x86, 0x3c, 0x52, 0xee, 0x10, 0x82, 0x3a, 0xdb, 0xad, 0x89,
	0x6d, 0x0a, 0x80, 0x58, 0xe7, 0x9f, 0xfd, 0x41, 0xfe, 0xd9, 0x9d, 0x4b, 0x78, 0x74, 0x78, 0xcf,
	0x7b, 0x7f, 0x39, 0x0b, 0x32, 0xaa, 0x25, 0x19, 0x53, 0x53, 0x1e, 0x77, 0xf1, 0x57, 0x1d, 0x9a,
	0xda, 0x10, 0xe8, 0x12, 0x5a, 0x05, 0x7f, 0x20, 0xfb, 0x3e, 0xa7, 0x3a, 0xef, 0x9c, 0xc8, 0xa8,
	0xf9, 0xab, 0xa0, 0x4f, 0xa1, 0xa9, 0x1d, 0x81, 0x3a, 0xb2, 0xb0, 0xe4, 0x24, 0xa7, 0x5b, 0x0e,
	0x17, 0xc1, 0xda, 0x12, 0x1a, 0x5c, 0xb2, 0x92, 0x06, 0x1f, 0x39, 0xa7, 0x82, 0x26, 0x00, 0xb9,
	0x23, 0x50, 0x4f, 0xd5, 0x95, 0xdd, 0xe4, 0xd8, 0xc7, 0x89, 0x3d, 0xc5, 0x1b, 0x78, 0x74, 0xe8,
	0x07, 0xa4, 0x46, 0xec, 0xa4, 0xa9, 0x9c, 0xa7, 0xa7, 0x93, 0x7b, 0xba, 0xe7, 0x00, 0xb9, 0x29,
	0xb4, 0xa2, 0x23, 0x9b, 0x38, 0x0f, 0x8b, 0x63, 0xec, 0x56, 0x3e, 0x34, 0xd0, 0x67, 0x60, 0xed,
	0x5f, 0x36, 0xd4, 0xdd, 0xe3, 0x0e, 0x9e, 0x4c, 0xa7, 0x77, 0x14, 0x2f, 0xde, 0xe3, 0xf0, 0x67,
	0x5c, 0xdf, 0xe3, 0xe4, 0xf3, 0xa6, 0xef, 0x71, 0xfa, 0xcd, 0x72, 0x2b, 0xe8, 0x6b, 0x78, 0x5c,
	0x7a, 0x42, 0x90, 0x82, 0x9c, 0x7e, 0xa2, 0x9c, 0xfe, 0x3d, 0x59, 0xcd, 0x38, 0x6d, 0xff, 0x76,
	0x37, 0x30, 0x7e, 0xbf, 0x1b, 0x18, 0x7f, 0xdc, 0x0d, 0x8c, 0x9f, 0xfe, 0x1c, 0x54, 0x6e, 0x4c,
	0xf1, 0xdf, 0xe0, 0xa3, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xa9, 0x18, 0x62, 0x53, 0x08,
	0x00, 0x00,
}
