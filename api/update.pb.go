// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/update.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetUpdateRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUpdateRequest) Reset()         { *m = GetUpdateRequest{} }
func (m *GetUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*GetUpdateRequest) ProtoMessage()    {}
func (*GetUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5aa194f67e1e9b6a, []int{0}
}
func (m *GetUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUpdateRequest.Merge(m, src)
}
func (m *GetUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUpdateRequest proto.InternalMessageInfo

type UpdatedInvoice struct {
	InvoiceId            int64    `protobuf:"varint,1,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatedInvoice) Reset()         { *m = UpdatedInvoice{} }
func (m *UpdatedInvoice) String() string { return proto.CompactTextString(m) }
func (*UpdatedInvoice) ProtoMessage()    {}
func (*UpdatedInvoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_5aa194f67e1e9b6a, []int{1}
}
func (m *UpdatedInvoice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatedInvoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatedInvoice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatedInvoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatedInvoice.Merge(m, src)
}
func (m *UpdatedInvoice) XXX_Size() int {
	return m.Size()
}
func (m *UpdatedInvoice) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatedInvoice.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatedInvoice proto.InternalMessageInfo

func (m *UpdatedInvoice) GetInvoiceId() int64 {
	if m != nil {
		return m.InvoiceId
	}
	return 0
}

type UpdatedTransaction struct {
	TransactionId        int64    `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatedTransaction) Reset()         { *m = UpdatedTransaction{} }
func (m *UpdatedTransaction) String() string { return proto.CompactTextString(m) }
func (*UpdatedTransaction) ProtoMessage()    {}
func (*UpdatedTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_5aa194f67e1e9b6a, []int{2}
}
func (m *UpdatedTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatedTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatedTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatedTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatedTransaction.Merge(m, src)
}
func (m *UpdatedTransaction) XXX_Size() int {
	return m.Size()
}
func (m *UpdatedTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatedTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatedTransaction proto.InternalMessageInfo

func (m *UpdatedTransaction) GetTransactionId() int64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

type Update struct {
	// Types that are valid to be assigned to Type:
	//	*Update_UpdatedInvoice
	//	*Update_UpdatedTransaction
	Type                 isUpdate_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Update) Reset()         { *m = Update{} }
func (m *Update) String() string { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()    {}
func (*Update) Descriptor() ([]byte, []int) {
	return fileDescriptor_5aa194f67e1e9b6a, []int{3}
}
func (m *Update) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Update) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Update.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Update) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update.Merge(m, src)
}
func (m *Update) XXX_Size() int {
	return m.Size()
}
func (m *Update) XXX_DiscardUnknown() {
	xxx_messageInfo_Update.DiscardUnknown(m)
}

var xxx_messageInfo_Update proto.InternalMessageInfo

type isUpdate_Type interface {
	isUpdate_Type()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Update_UpdatedInvoice struct {
	UpdatedInvoice *UpdatedInvoice `protobuf:"bytes,1,opt,name=updated_invoice,json=updatedInvoice,proto3,oneof"`
}
type Update_UpdatedTransaction struct {
	UpdatedTransaction *UpdatedTransaction `protobuf:"bytes,2,opt,name=updated_transaction,json=updatedTransaction,proto3,oneof"`
}

func (*Update_UpdatedInvoice) isUpdate_Type()     {}
func (*Update_UpdatedTransaction) isUpdate_Type() {}

func (m *Update) GetType() isUpdate_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Update) GetUpdatedInvoice() *UpdatedInvoice {
	if x, ok := m.GetType().(*Update_UpdatedInvoice); ok {
		return x.UpdatedInvoice
	}
	return nil
}

func (m *Update) GetUpdatedTransaction() *UpdatedTransaction {
	if x, ok := m.GetType().(*Update_UpdatedTransaction); ok {
		return x.UpdatedTransaction
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Update) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Update_OneofMarshaler, _Update_OneofUnmarshaler, _Update_OneofSizer, []interface{}{
		(*Update_UpdatedInvoice)(nil),
		(*Update_UpdatedTransaction)(nil),
	}
}

func _Update_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Update)
	// type
	switch x := m.Type.(type) {
	case *Update_UpdatedInvoice:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdatedInvoice); err != nil {
			return err
		}
	case *Update_UpdatedTransaction:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdatedTransaction); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Update.Type has unexpected type %T", x)
	}
	return nil
}

func _Update_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Update)
	switch tag {
	case 1: // type.updated_invoice
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdatedInvoice)
		err := b.DecodeMessage(msg)
		m.Type = &Update_UpdatedInvoice{msg}
		return true, err
	case 2: // type.updated_transaction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdatedTransaction)
		err := b.DecodeMessage(msg)
		m.Type = &Update_UpdatedTransaction{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Update_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Update)
	// type
	switch x := m.Type.(type) {
	case *Update_UpdatedInvoice:
		s := proto.Size(x.UpdatedInvoice)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Update_UpdatedTransaction:
		s := proto.Size(x.UpdatedTransaction)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*GetUpdateRequest)(nil), "api.GetUpdateRequest")
	proto.RegisterType((*UpdatedInvoice)(nil), "api.UpdatedInvoice")
	proto.RegisterType((*UpdatedTransaction)(nil), "api.UpdatedTransaction")
	proto.RegisterType((*Update)(nil), "api.Update")
}

func init() { proto.RegisterFile("api/update.proto", fileDescriptor_5aa194f67e1e9b6a) }

var fileDescriptor_5aa194f67e1e9b6a = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x2c, 0xc8, 0xd4,
	0x2f, 0x2d, 0x48, 0x49, 0x2c, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c,
	0xc8, 0x54, 0x12, 0xe2, 0x12, 0x70, 0x4f, 0x2d, 0x09, 0x05, 0x8b, 0x07, 0xa5, 0x16, 0x96, 0xa6,
	0x16, 0x97, 0x28, 0xe9, 0x73, 0xf1, 0x41, 0x04, 0x52, 0x3c, 0xf3, 0xca, 0xf2, 0x33, 0x93, 0x53,
	0x85, 0x64, 0xb9, 0xb8, 0x32, 0x21, 0xcc, 0xf8, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xe6,
	0x20, 0x4e, 0xa8, 0x88, 0x67, 0x8a, 0x92, 0x35, 0x97, 0x10, 0x54, 0x43, 0x48, 0x51, 0x62, 0x5e,
	0x71, 0x62, 0x72, 0x49, 0x66, 0x7e, 0x9e, 0x90, 0x2a, 0x17, 0x5f, 0x09, 0x82, 0x8b, 0xd0, 0xc8,
	0x8b, 0x24, 0xea, 0x99, 0xa2, 0x34, 0x87, 0x91, 0x8b, 0x0d, 0xa2, 0x5b, 0xc8, 0x8e, 0x8b, 0x1f,
	0xe2, 0xc2, 0x94, 0x78, 0xa8, 0xe1, 0x60, 0x2d, 0xdc, 0x46, 0xc2, 0x7a, 0x89, 0x05, 0x99, 0x7a,
	0xa8, 0x8e, 0xf2, 0x60, 0x08, 0xe2, 0x2b, 0x45, 0x75, 0xa6, 0x17, 0x97, 0x30, 0x4c, 0x3f, 0x92,
	0x1d, 0x12, 0x4c, 0x60, 0x33, 0xc4, 0x91, 0xcd, 0x40, 0x72, 0xa7, 0x07, 0x43, 0x90, 0x50, 0x29,
	0x86, 0xa8, 0x13, 0x1b, 0x17, 0x4b, 0x49, 0x65, 0x41, 0xaa, 0x91, 0x1d, 0x17, 0x3b, 0x44, 0x4f,
	0xb1, 0x90, 0x31, 0x17, 0x27, 0x3c, 0xac, 0x84, 0x44, 0xc1, 0xc6, 0xa1, 0x87, 0x9d, 0x14, 0x37,
	0x92, 0x2d, 0x4a, 0x0c, 0x06, 0x8c, 0x4e, 0x3c, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7,
	0xf8, 0xe0, 0x91, 0x1c, 0x63, 0x12, 0x1b, 0x38, 0xe8, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x21, 0xa6, 0xbd, 0x05, 0x8e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UpdatesClient is the client API for Updates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpdatesClient interface {
	// Подписка на уведомления.
	GetUpdate(ctx context.Context, in *GetUpdateRequest, opts ...grpc.CallOption) (Updates_GetUpdateClient, error)
}

type updatesClient struct {
	cc *grpc.ClientConn
}

func NewUpdatesClient(cc *grpc.ClientConn) UpdatesClient {
	return &updatesClient{cc}
}

func (c *updatesClient) GetUpdate(ctx context.Context, in *GetUpdateRequest, opts ...grpc.CallOption) (Updates_GetUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Updates_serviceDesc.Streams[0], "/api.Updates/GetUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &updatesGetUpdateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Updates_GetUpdateClient interface {
	Recv() (*Update, error)
	grpc.ClientStream
}

type updatesGetUpdateClient struct {
	grpc.ClientStream
}

func (x *updatesGetUpdateClient) Recv() (*Update, error) {
	m := new(Update)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpdatesServer is the server API for Updates service.
type UpdatesServer interface {
	// Подписка на уведомления.
	GetUpdate(*GetUpdateRequest, Updates_GetUpdateServer) error
}

func RegisterUpdatesServer(s *grpc.Server, srv UpdatesServer) {
	s.RegisterService(&_Updates_serviceDesc, srv)
}

func _Updates_GetUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUpdateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdatesServer).GetUpdate(m, &updatesGetUpdateServer{stream})
}

type Updates_GetUpdateServer interface {
	Send(*Update) error
	grpc.ServerStream
}

type updatesGetUpdateServer struct {
	grpc.ServerStream
}

func (x *updatesGetUpdateServer) Send(m *Update) error {
	return x.ServerStream.SendMsg(m)
}

var _Updates_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Updates",
	HandlerType: (*UpdatesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUpdate",
			Handler:       _Updates_GetUpdate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/update.proto",
}

func (m *GetUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdatedInvoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatedInvoice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InvoiceId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUpdate(dAtA, i, uint64(m.InvoiceId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdatedTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatedTransaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TransactionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUpdate(dAtA, i, uint64(m.TransactionId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Update) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Update) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		nn1, err := m.Type.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Update_UpdatedInvoice) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdatedInvoice != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUpdate(dAtA, i, uint64(m.UpdatedInvoice.Size()))
		n2, err := m.UpdatedInvoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Update_UpdatedTransaction) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdatedTransaction != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUpdate(dAtA, i, uint64(m.UpdatedTransaction.Size()))
		n3, err := m.UpdatedTransaction.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func encodeVarintUpdate(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatedInvoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InvoiceId != 0 {
		n += 1 + sovUpdate(uint64(m.InvoiceId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatedTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransactionId != 0 {
		n += 1 + sovUpdate(uint64(m.TransactionId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Update) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Update_UpdatedInvoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdatedInvoice != nil {
		l = m.UpdatedInvoice.Size()
		n += 1 + l + sovUpdate(uint64(l))
	}
	return n
}
func (m *Update_UpdatedTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdatedTransaction != nil {
		l = m.UpdatedTransaction.Size()
		n += 1 + l + sovUpdate(uint64(l))
	}
	return n
}

func sovUpdate(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUpdate(x uint64) (n int) {
	return sovUpdate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUpdate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatedInvoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatedInvoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatedInvoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceId", wireType)
			}
			m.InvoiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvoiceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpdate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatedTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatedTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatedTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpdate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Update) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Update: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Update: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedInvoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdatedInvoice{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Update_UpdatedInvoice{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedTransaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdatedTransaction{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Update_UpdatedTransaction{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpdate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUpdate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUpdate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUpdate
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthUpdate
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUpdate
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUpdate(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthUpdate
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUpdate = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUpdate   = fmt.Errorf("proto: integer overflow")
)
