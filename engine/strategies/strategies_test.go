package strategies

import (
	"testing"

	"github.com/gebv/acca/engine"
	"github.com/stretchr/testify/require"
)

func TestSimpleStrategy(t *testing.T) {
	t.Run("ACCEPT", func(t *testing.T) {
		noDbFromTest = newNoDbFromTest()
		inv := noDbFromTest.GetInv(1)
		require.EqualValues(t, engine.DRAFT_I, inv.Status)
		tr1 := noDbFromTest.GetTr(1)
		require.EqualValues(t, engine.DRAFT_TX, tr1.Status)
		tr2 := noDbFromTest.GetTr(2)
		require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
		t.Run("SET-AUTH_TX", func(t *testing.T) {
			err := SetTransactionStatus(1, engine.AUTH_TX)
			require.NoError(t, err)
			err = SetInvoiceStatus(1, engine.AUTH_I)
			require.NoError(t, err)
			inv = noDbFromTest.GetInv(1)
			require.EqualValues(t, engine.DRAFT_I, inv.Status)
			tr1 = noDbFromTest.GetTr(1)
			require.EqualValues(t, engine.AUTH_TX, tr1.Status)
			tr2 = noDbFromTest.GetTr(2)
			require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
		})
		t.Run("SET-AUTH_TX", func(t *testing.T) {
			err := SetTransactionStatus(2, engine.AUTH_TX)
			require.NoError(t, err)
			err = SetInvoiceStatus(1, engine.AUTH_I)
			inv := noDbFromTest.GetInv(1)
			require.EqualValues(t, engine.AUTH_I, inv.Status)
			tr1 := noDbFromTest.GetTr(1)
			require.EqualValues(t, engine.AUTH_TX, tr1.Status)
			tr2 := noDbFromTest.GetTr(2)
			require.EqualValues(t, engine.AUTH_TX, tr2.Status)
			require.NoError(t, err)
		})
		t.Run("SET-ACCEPTED_TX", func(t *testing.T) {
			err := SetTransactionStatus(1, engine.ACCEPTED_TX)
			require.NoError(t, err)
			err = SetInvoiceStatus(1, engine.ACCEPTED_I)
			require.NoError(t, err)
			inv := noDbFromTest.GetInv(1)
			require.EqualValues(t, engine.AUTH_I, inv.Status)
			tr1 := noDbFromTest.GetTr(1)
			require.EqualValues(t, engine.ACCEPTED_TX, tr1.Status)
			tr2 := noDbFromTest.GetTr(2)
			require.EqualValues(t, engine.AUTH_TX, tr2.Status)
		})
		t.Run("SET-ACCEPTED_TX", func(t *testing.T) {
			err := SetTransactionStatus(2, engine.ACCEPTED_TX)
			require.NoError(t, err)
			err = SetInvoiceStatus(1, engine.ACCEPTED_I)
			require.NoError(t, err)
			inv := noDbFromTest.GetInv(1)
			require.EqualValues(t, engine.ACCEPTED_I, inv.Status)
			tr1 := noDbFromTest.GetTr(1)
			require.EqualValues(t, engine.ACCEPTED_TX, tr1.Status)
			tr2 := noDbFromTest.GetTr(2)
			require.EqualValues(t, engine.ACCEPTED_TX, tr2.Status)
		})
	})
	t.Run("ACCEPT_WITH_HOLD", func(t *testing.T) {
		noDbFromTest = newNoDbFromTest()
		inv := noDbFromTest.GetInv(1)
		require.EqualValues(t, engine.DRAFT_I, inv.Status)
		tr1 := noDbFromTest.GetTr(1)
		require.EqualValues(t, engine.DRAFT_TX, tr1.Status)
		tr2 := noDbFromTest.GetTr(2)
		require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
		t.Run("SET-AUTH_TX", func(t *testing.T) {
			err := SetTransactionStatus(1, engine.AUTH_TX)
			require.NoError(t, err)
			err = SetInvoiceStatus(1, engine.AUTH_I)
			require.NoError(t, err)
			inv = noDbFromTest.GetInv(1)
			require.EqualValues(t, engine.DRAFT_I, inv.Status)
			tr1 = noDbFromTest.GetTr(1)
			require.EqualValues(t, engine.AUTH_TX, tr1.Status)
			tr2 = noDbFromTest.GetTr(2)
			require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
		})
		t.Run("SET-AUTH_TX", func(t *testing.T) {
			err := SetTransactionStatus(2, engine.AUTH_TX)
			require.NoError(t, err)
			err = SetInvoiceStatus(1, engine.AUTH_I)
			inv := noDbFromTest.GetInv(1)
			require.EqualValues(t, engine.AUTH_I, inv.Status)
			tr1 := noDbFromTest.GetTr(1)
			require.EqualValues(t, engine.AUTH_TX, tr1.Status)
			tr2 := noDbFromTest.GetTr(2)
			require.EqualValues(t, engine.AUTH_TX, tr2.Status)
			require.NoError(t, err)
		})
		t.Run("SET-HOLD_TX", func(t *testing.T) {
			err := SetTransactionStatus(1, engine.HOLD_TX)
			require.NoError(t, err)
			err = SetInvoiceStatus(1, engine.WAIT_I)
			require.NoError(t, err)
			inv = noDbFromTest.GetInv(1)
			require.EqualValues(t, engine.AUTH_I, inv.Status)
			tr1 = noDbFromTest.GetTr(1)
			require.EqualValues(t, engine.HOLD_TX, tr1.Status)
			tr2 = noDbFromTest.GetTr(2)
			require.EqualValues(t, engine.AUTH_TX, tr2.Status)
		})
		t.Run("SET-HOLD_TX", func(t *testing.T) {
			err := SetTransactionStatus(2, engine.HOLD_TX)
			require.NoError(t, err)
			err = SetInvoiceStatus(1, engine.WAIT_I)
			require.NoError(t, err)
			inv = noDbFromTest.GetInv(1)
			require.EqualValues(t, engine.WAIT_I, inv.Status)
			tr1 = noDbFromTest.GetTr(1)
			require.EqualValues(t, engine.HOLD_TX, tr1.Status)
			tr2 = noDbFromTest.GetTr(2)
			require.EqualValues(t, engine.HOLD_TX, tr2.Status)
		})
		t.Run("SET-ACCEPTED_TX", func(t *testing.T) {
			err := SetTransactionStatus(1, engine.ACCEPTED_TX)
			require.NoError(t, err)
			err = SetInvoiceStatus(1, engine.ACCEPTED_I)
			require.NoError(t, err)
			inv := noDbFromTest.GetInv(1)
			require.EqualValues(t, engine.WAIT_I, inv.Status)
			tr1 := noDbFromTest.GetTr(1)
			require.EqualValues(t, engine.ACCEPTED_TX, tr1.Status)
			tr2 := noDbFromTest.GetTr(2)
			require.EqualValues(t, engine.HOLD_TX, tr2.Status)
		})
		t.Run("SET-ACCEPTED_TX", func(t *testing.T) {
			err := SetTransactionStatus(2, engine.ACCEPTED_TX)
			require.NoError(t, err)
			err = SetInvoiceStatus(1, engine.ACCEPTED_I)
			require.NoError(t, err)
			inv := noDbFromTest.GetInv(1)
			require.EqualValues(t, engine.ACCEPTED_I, inv.Status)
			tr1 := noDbFromTest.GetTr(1)
			require.EqualValues(t, engine.ACCEPTED_TX, tr1.Status)
			tr2 := noDbFromTest.GetTr(2)
			require.EqualValues(t, engine.ACCEPTED_TX, tr2.Status)

		})
	})
	t.Run("REJECTED", func(t *testing.T) {
		noDbFromTest = newNoDbFromTest()
		inv := noDbFromTest.GetInv(1)
		require.EqualValues(t, engine.DRAFT_I, inv.Status)
		tr1 := noDbFromTest.GetTr(1)
		require.EqualValues(t, engine.DRAFT_TX, tr1.Status)
		tr2 := noDbFromTest.GetTr(2)
		require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
		t.Run("SET-REJECTED_TX", func(t *testing.T) {
			err := SetTransactionStatus(1, engine.REJECTED_TX)
			require.NoError(t, err)
			err = SetInvoiceStatus(1, engine.REJECTED_I)
			require.NoError(t, err)
			inv = noDbFromTest.GetInv(1)
			require.EqualValues(t, engine.DRAFT_I, inv.Status)
			tr1 = noDbFromTest.GetTr(1)
			require.EqualValues(t, engine.REJECTED_TX, tr1.Status)
			tr2 = noDbFromTest.GetTr(2)
			require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
		})
		t.Run("SET-REJECTED_TX", func(t *testing.T) {
			err := SetTransactionStatus(2, engine.REJECTED_TX)
			require.NoError(t, err)
			err = SetInvoiceStatus(1, engine.REJECTED_I)
			inv := noDbFromTest.GetInv(1)
			require.EqualValues(t, engine.REJECTED_TX, inv.Status)
			tr1 := noDbFromTest.GetTr(1)
			require.EqualValues(t, engine.REJECTED_TX, tr1.Status)
			tr2 := noDbFromTest.GetTr(2)
			require.EqualValues(t, engine.REJECTED_TX, tr2.Status)
			require.NoError(t, err)
		})
	})
}

func TestSberbankStrategy(t *testing.T) {
	t.Run("ACCEPT", func(t *testing.T) {
		noDbFromTest = newNoDbFromTest()
		inv := noDbFromTest.GetInv(2)
		require.EqualValues(t, engine.DRAFT_I, inv.Status)
		tr1 := noDbFromTest.GetTr(3)
		require.EqualValues(t, engine.DRAFT_TX, tr1.Status)
		tr2 := noDbFromTest.GetTr(4)
		require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
		t.Run("SET-AUTH_TX", func(t *testing.T) {
			simRequestToSberbank.setFailRequest(true)
			err := SetTransactionStatus(3, engine.AUTH_TX)
			require.NoError(t, err)
			err = SetInvoiceStatus(2, engine.AUTH_I)
			require.NoError(t, err)
			inv = noDbFromTest.GetInv(2)
			require.EqualValues(t, engine.DRAFT_I, inv.Status)
			tr1 = noDbFromTest.GetTr(3)
			require.EqualValues(t, engine.DRAFT_TX, tr1.Status)
			tr2 = noDbFromTest.GetTr(4)
			require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
			simRequestToSberbank.setFailRequest(false)
			err = SetTransactionStatus(3, engine.AUTH_TX)
			require.NoError(t, err)
			err = SetInvoiceStatus(2, engine.AUTH_I)
			require.NoError(t, err)
			inv = noDbFromTest.GetInv(2)
			require.EqualValues(t, engine.DRAFT_I, inv.Status)
			tr1 = noDbFromTest.GetTr(3)
			require.EqualValues(t, engine.AUTH_TX, tr1.Status)
			tr2 = noDbFromTest.GetTr(4)
			require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
		})
		t.Run("SET-AUTH_TX", func(t *testing.T) {
			err := SetTransactionStatus(4, engine.AUTH_TX)
			require.NoError(t, err)
			err = SetInvoiceStatus(2, engine.AUTH_I)
			inv := noDbFromTest.GetInv(2)
			require.EqualValues(t, engine.AUTH_I, inv.Status)
			tr1 := noDbFromTest.GetTr(3)
			require.EqualValues(t, engine.AUTH_TX, tr1.Status)
			tr2 := noDbFromTest.GetTr(4)
			require.EqualValues(t, engine.AUTH_TX, tr2.Status)
			require.NoError(t, err)
		})
		t.Run("SET-ACCEPTED_TX", func(t *testing.T) {
			simRequestToSberbank.setFailRequest(true)
			err := SetTransactionStatus(3, engine.ACCEPTED_TX)
			require.NoError(t, err)
			err = SetInvoiceStatus(2, engine.ACCEPTED_I)
			require.NoError(t, err)
			inv := noDbFromTest.GetInv(2)
			require.EqualValues(t, engine.AUTH_I, inv.Status)
			tr1 := noDbFromTest.GetTr(3)
			require.EqualValues(t, engine.AUTH_TX, tr1.Status)
			tr2 := noDbFromTest.GetTr(4)
			require.EqualValues(t, engine.AUTH_TX, tr2.Status)
			simRequestToSberbank.setFailRequest(false)
			err = SetTransactionStatus(3, engine.ACCEPTED_TX)
			require.NoError(t, err)
			err = SetInvoiceStatus(2, engine.ACCEPTED_I)
			require.NoError(t, err)
			inv = noDbFromTest.GetInv(2)
			require.EqualValues(t, engine.AUTH_I, inv.Status)
			tr1 = noDbFromTest.GetTr(3)
			require.EqualValues(t, engine.ACCEPTED_TX, tr1.Status)
			tr2 = noDbFromTest.GetTr(4)
			require.EqualValues(t, engine.AUTH_TX, tr2.Status)
		})
		t.Run("SET-ACCEPTED_TX", func(t *testing.T) {
			err := SetTransactionStatus(4, engine.ACCEPTED_TX)
			require.NoError(t, err)
			err = SetInvoiceStatus(2, engine.ACCEPTED_I)
			require.NoError(t, err)
			inv := noDbFromTest.GetInv(2)
			require.EqualValues(t, engine.ACCEPTED_I, inv.Status)
			tr1 := noDbFromTest.GetTr(3)
			require.EqualValues(t, engine.ACCEPTED_TX, tr1.Status)
			tr2 := noDbFromTest.GetTr(4)
			require.EqualValues(t, engine.ACCEPTED_TX, tr2.Status)
		})
	})
	t.Run("REJECTED", func(t *testing.T) {
		noDbFromTest = newNoDbFromTest()
		inv := noDbFromTest.GetInv(2)
		require.EqualValues(t, engine.DRAFT_I, inv.Status)
		tr1 := noDbFromTest.GetTr(3)
		require.EqualValues(t, engine.DRAFT_TX, tr1.Status)
		tr2 := noDbFromTest.GetTr(4)
		require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
		t.Run("SET-REJECTED_TX", func(t *testing.T) {
			err := SetTransactionStatus(3, engine.REJECTED_TX)
			require.NoError(t, err)
			err = SetInvoiceStatus(2, engine.REJECTED_I)
			require.NoError(t, err)
			inv = noDbFromTest.GetInv(2)
			require.EqualValues(t, engine.DRAFT_I, inv.Status)
			tr1 = noDbFromTest.GetTr(3)
			require.EqualValues(t, engine.REJECTED_TX, tr1.Status)
			tr2 = noDbFromTest.GetTr(4)
			require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
		})
		t.Run("SET-REJECTED_TX", func(t *testing.T) {
			err := SetTransactionStatus(4, engine.REJECTED_TX)
			require.NoError(t, err)
			err = SetInvoiceStatus(2, engine.REJECTED_I)
			inv := noDbFromTest.GetInv(2)
			require.EqualValues(t, engine.REJECTED_TX, inv.Status)
			tr1 := noDbFromTest.GetTr(3)
			require.EqualValues(t, engine.REJECTED_TX, tr1.Status)
			tr2 := noDbFromTest.GetTr(4)
			require.EqualValues(t, engine.REJECTED_TX, tr2.Status)
			require.NoError(t, err)
		})
	})
}
