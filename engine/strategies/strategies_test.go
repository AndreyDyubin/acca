package strategies

import (
	"context"
	"testing"

	"github.com/gebv/acca/engine"
	"github.com/gebv/acca/engine/strategies/for_testing"
	_ "github.com/gebv/acca/engine/strategies/irecharge"
	_ "github.com/gebv/acca/engine/strategies/isimple"
	_ "github.com/gebv/acca/engine/strategies/tsberbank"
	_ "github.com/gebv/acca/engine/strategies/tsimple"
	"github.com/gebv/acca/ffsm"
	"github.com/stretchr/testify/require"
)

func TestSimpleStrategy(t *testing.T) {
	ctx := context.Background()
	t.Run("ACCEPT", func(t *testing.T) {
		for_testing.NoDbFromTest = for_testing.NewNoDbFromTest()
		inv := for_testing.NoDbFromTest.GetInv(1)
		require.EqualValues(t, engine.DRAFT_I, inv.Status)
		tr1 := for_testing.NoDbFromTest.GetTr(1)
		require.EqualValues(t, engine.DRAFT_TX, tr1.Status)
		tr2 := for_testing.NoDbFromTest.GetTr(2)
		require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
		t.Run("SET-AUTH_TX", func(t *testing.T) {
			err := DispatchTransaction(ctx, 1, ffsm.State(engine.AUTH_TX))
			require.NoError(t, err)
			err = DispatchInvoice(ctx, 1, ffsm.State(engine.AUTH_I))
			require.NoError(t, err)
			inv = for_testing.NoDbFromTest.GetInv(1)
			require.EqualValues(t, engine.DRAFT_I, inv.Status)
			tr1 = for_testing.NoDbFromTest.GetTr(1)
			require.EqualValues(t, engine.AUTH_TX, tr1.Status)
			tr2 = for_testing.NoDbFromTest.GetTr(2)
			require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
		})
		t.Run("SET-AUTH_TX", func(t *testing.T) {
			err := DispatchTransaction(ctx, 2, ffsm.State(engine.AUTH_TX))
			require.NoError(t, err)
			err = DispatchInvoice(ctx, 1, ffsm.State(engine.AUTH_I))
			inv := for_testing.NoDbFromTest.GetInv(1)
			require.EqualValues(t, engine.AUTH_I, inv.Status)
			tr1 := for_testing.NoDbFromTest.GetTr(1)
			require.EqualValues(t, engine.AUTH_TX, tr1.Status)
			tr2 := for_testing.NoDbFromTest.GetTr(2)
			require.EqualValues(t, engine.AUTH_TX, tr2.Status)
			require.NoError(t, err)
		})
		t.Run("SET-ACCEPTED_TX", func(t *testing.T) {
			err := DispatchTransaction(ctx, 1, ffsm.State(engine.ACCEPTED_TX))
			require.NoError(t, err)
			err = DispatchInvoice(ctx, 1, ffsm.State(engine.ACCEPTED_I))
			require.NoError(t, err)
			inv := for_testing.NoDbFromTest.GetInv(1)
			require.EqualValues(t, engine.AUTH_I, inv.Status)
			tr1 := for_testing.NoDbFromTest.GetTr(1)
			require.EqualValues(t, engine.ACCEPTED_TX, tr1.Status)
			tr2 := for_testing.NoDbFromTest.GetTr(2)
			require.EqualValues(t, engine.AUTH_TX, tr2.Status)
		})
		t.Run("SET-ACCEPTED_TX", func(t *testing.T) {
			err := DispatchTransaction(ctx, 2, ffsm.State(engine.ACCEPTED_TX))
			require.NoError(t, err)
			err = DispatchInvoice(ctx, 1, ffsm.State(engine.ACCEPTED_I))
			require.NoError(t, err)
			inv := for_testing.NoDbFromTest.GetInv(1)
			require.EqualValues(t, engine.ACCEPTED_I, inv.Status)
			tr1 := for_testing.NoDbFromTest.GetTr(1)
			require.EqualValues(t, engine.ACCEPTED_TX, tr1.Status)
			tr2 := for_testing.NoDbFromTest.GetTr(2)
			require.EqualValues(t, engine.ACCEPTED_TX, tr2.Status)
		})
	})
	t.Run("ACCEPT_WITH_HOLD", func(t *testing.T) {
		for_testing.NoDbFromTest = for_testing.NewNoDbFromTest()
		inv := for_testing.NoDbFromTest.GetInv(1)
		require.EqualValues(t, engine.DRAFT_I, inv.Status)
		tr1 := for_testing.NoDbFromTest.GetTr(1)
		require.EqualValues(t, engine.DRAFT_TX, tr1.Status)
		tr2 := for_testing.NoDbFromTest.GetTr(2)
		require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
		t.Run("SET-AUTH_TX", func(t *testing.T) {
			err := DispatchTransaction(ctx, 1, ffsm.State(engine.AUTH_TX))
			require.NoError(t, err)
			err = DispatchInvoice(ctx, 1, ffsm.State(engine.AUTH_I))
			require.NoError(t, err)
			inv = for_testing.NoDbFromTest.GetInv(1)
			require.EqualValues(t, engine.DRAFT_I, inv.Status)
			tr1 = for_testing.NoDbFromTest.GetTr(1)
			require.EqualValues(t, engine.AUTH_TX, tr1.Status)
			tr2 = for_testing.NoDbFromTest.GetTr(2)
			require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
		})
		t.Run("SET-AUTH_TX", func(t *testing.T) {
			err := DispatchTransaction(ctx, 2, ffsm.State(engine.AUTH_TX))
			require.NoError(t, err)
			err = DispatchInvoice(ctx, 1, ffsm.State(engine.AUTH_I))
			inv := for_testing.NoDbFromTest.GetInv(1)
			require.EqualValues(t, engine.AUTH_I, inv.Status)
			tr1 := for_testing.NoDbFromTest.GetTr(1)
			require.EqualValues(t, engine.AUTH_TX, tr1.Status)
			tr2 := for_testing.NoDbFromTest.GetTr(2)
			require.EqualValues(t, engine.AUTH_TX, tr2.Status)
			require.NoError(t, err)
		})
		t.Run("SET-HOLD_TX", func(t *testing.T) {
			err := DispatchTransaction(ctx, 1, ffsm.State(engine.HOLD_TX))
			require.NoError(t, err)
			err = DispatchInvoice(ctx, 1, ffsm.State(engine.WAIT_I))
			require.NoError(t, err)
			inv = for_testing.NoDbFromTest.GetInv(1)
			require.EqualValues(t, engine.AUTH_I, inv.Status)
			tr1 = for_testing.NoDbFromTest.GetTr(1)
			require.EqualValues(t, engine.HOLD_TX, tr1.Status)
			tr2 = for_testing.NoDbFromTest.GetTr(2)
			require.EqualValues(t, engine.AUTH_TX, tr2.Status)
		})
		t.Run("SET-HOLD_TX", func(t *testing.T) {
			err := DispatchTransaction(ctx, 2, ffsm.State(engine.HOLD_TX))
			require.NoError(t, err)
			err = DispatchInvoice(ctx, 1, ffsm.State(engine.WAIT_I))
			require.NoError(t, err)
			inv = for_testing.NoDbFromTest.GetInv(1)
			require.EqualValues(t, engine.WAIT_I, inv.Status)
			tr1 = for_testing.NoDbFromTest.GetTr(1)
			require.EqualValues(t, engine.HOLD_TX, tr1.Status)
			tr2 = for_testing.NoDbFromTest.GetTr(2)
			require.EqualValues(t, engine.HOLD_TX, tr2.Status)
		})
		t.Run("SET-ACCEPTED_TX", func(t *testing.T) {
			err := DispatchTransaction(ctx, 1, ffsm.State(engine.ACCEPTED_TX))
			require.NoError(t, err)
			err = DispatchInvoice(ctx, 1, ffsm.State(engine.ACCEPTED_I))
			require.NoError(t, err)
			inv := for_testing.NoDbFromTest.GetInv(1)
			require.EqualValues(t, engine.WAIT_I, inv.Status)
			tr1 := for_testing.NoDbFromTest.GetTr(1)
			require.EqualValues(t, engine.ACCEPTED_TX, tr1.Status)
			tr2 := for_testing.NoDbFromTest.GetTr(2)
			require.EqualValues(t, engine.HOLD_TX, tr2.Status)
		})
		t.Run("SET-ACCEPTED_TX", func(t *testing.T) {
			err := DispatchTransaction(ctx, 2, ffsm.State(engine.ACCEPTED_TX))
			require.NoError(t, err)
			err = DispatchInvoice(ctx, 1, ffsm.State(engine.ACCEPTED_I))
			require.NoError(t, err)
			inv := for_testing.NoDbFromTest.GetInv(1)
			require.EqualValues(t, engine.ACCEPTED_I, inv.Status)
			tr1 := for_testing.NoDbFromTest.GetTr(1)
			require.EqualValues(t, engine.ACCEPTED_TX, tr1.Status)
			tr2 := for_testing.NoDbFromTest.GetTr(2)
			require.EqualValues(t, engine.ACCEPTED_TX, tr2.Status)

		})
	})
	t.Run("REJECTED", func(t *testing.T) {
		for_testing.NoDbFromTest = for_testing.NewNoDbFromTest()
		inv := for_testing.NoDbFromTest.GetInv(1)
		require.EqualValues(t, engine.DRAFT_I, inv.Status)
		tr1 := for_testing.NoDbFromTest.GetTr(1)
		require.EqualValues(t, engine.DRAFT_TX, tr1.Status)
		tr2 := for_testing.NoDbFromTest.GetTr(2)
		require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
		t.Run("SET-REJECTED_TX", func(t *testing.T) {
			err := DispatchTransaction(ctx, 1, ffsm.State(engine.REJECTED_TX))
			require.NoError(t, err)
			err = DispatchInvoice(ctx, 1, ffsm.State(engine.REJECTED_I))
			require.NoError(t, err)
			inv = for_testing.NoDbFromTest.GetInv(1)
			require.EqualValues(t, engine.DRAFT_I, inv.Status)
			tr1 = for_testing.NoDbFromTest.GetTr(1)
			require.EqualValues(t, engine.REJECTED_TX, tr1.Status)
			tr2 = for_testing.NoDbFromTest.GetTr(2)
			require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
		})
		t.Run("SET-REJECTED_TX", func(t *testing.T) {
			err := DispatchTransaction(ctx, 2, ffsm.State(engine.REJECTED_TX))
			require.NoError(t, err)
			err = DispatchInvoice(ctx, 1, ffsm.State(engine.REJECTED_I))
			inv := for_testing.NoDbFromTest.GetInv(1)
			require.EqualValues(t, engine.REJECTED_TX, inv.Status)
			tr1 := for_testing.NoDbFromTest.GetTr(1)
			require.EqualValues(t, engine.REJECTED_TX, tr1.Status)
			tr2 := for_testing.NoDbFromTest.GetTr(2)
			require.EqualValues(t, engine.REJECTED_TX, tr2.Status)
			require.NoError(t, err)
		})
	})
}

func TestSberbankStrategy(t *testing.T) {
	ctx := context.Background()
	t.Run("ACCEPT", func(t *testing.T) {
		for_testing.NoDbFromTest = for_testing.NewNoDbFromTest()
		inv := for_testing.NoDbFromTest.GetInv(2)
		require.EqualValues(t, engine.DRAFT_I, inv.Status)
		tr1 := for_testing.NoDbFromTest.GetTr(3)
		require.EqualValues(t, engine.DRAFT_TX, tr1.Status)
		tr2 := for_testing.NoDbFromTest.GetTr(4)
		require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
		t.Run("SET-AUTH_TX", func(t *testing.T) {
			for_testing.SimRequestToSberbank.SetFailRequest(true)
			err := DispatchTransaction(ctx, 3, ffsm.State(engine.AUTH_TX))
			require.NoError(t, err)
			err = DispatchInvoice(ctx, 2, ffsm.State(engine.AUTH_I))
			require.NoError(t, err)
			inv = for_testing.NoDbFromTest.GetInv(2)
			require.EqualValues(t, engine.DRAFT_I, inv.Status)
			tr1 = for_testing.NoDbFromTest.GetTr(3)
			require.EqualValues(t, engine.DRAFT_TX, tr1.Status)
			tr2 = for_testing.NoDbFromTest.GetTr(4)
			require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
			for_testing.SimRequestToSberbank.SetFailRequest(false)
			err = DispatchTransaction(ctx, 3, ffsm.State(engine.AUTH_TX))
			require.NoError(t, err)
			err = DispatchInvoice(ctx, 2, ffsm.State(engine.AUTH_I))
			require.NoError(t, err)
			inv = for_testing.NoDbFromTest.GetInv(2)
			require.EqualValues(t, engine.DRAFT_I, inv.Status)
			tr1 = for_testing.NoDbFromTest.GetTr(3)
			require.EqualValues(t, engine.AUTH_TX, tr1.Status)
			tr2 = for_testing.NoDbFromTest.GetTr(4)
			require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
		})
		t.Run("SET-AUTH_TX", func(t *testing.T) {
			err := DispatchTransaction(ctx, 4, ffsm.State(engine.AUTH_TX))
			require.NoError(t, err)
			err = DispatchInvoice(ctx, 2, ffsm.State(engine.AUTH_I))
			inv := for_testing.NoDbFromTest.GetInv(2)
			require.EqualValues(t, engine.AUTH_I, inv.Status)
			tr1 := for_testing.NoDbFromTest.GetTr(3)
			require.EqualValues(t, engine.AUTH_TX, tr1.Status)
			tr2 := for_testing.NoDbFromTest.GetTr(4)
			require.EqualValues(t, engine.AUTH_TX, tr2.Status)
			require.NoError(t, err)
		})
		t.Run("SET-ACCEPTED_TX", func(t *testing.T) {
			for_testing.SimRequestToSberbank.SetFailRequest(true)
			err := DispatchTransaction(ctx, 3, ffsm.State(engine.ACCEPTED_TX))
			require.NoError(t, err)
			err = DispatchInvoice(ctx, 2, ffsm.State(engine.ACCEPTED_I))
			require.NoError(t, err)
			inv := for_testing.NoDbFromTest.GetInv(2)
			require.EqualValues(t, engine.AUTH_I, inv.Status)
			tr1 := for_testing.NoDbFromTest.GetTr(3)
			require.EqualValues(t, engine.AUTH_TX, tr1.Status)
			tr2 := for_testing.NoDbFromTest.GetTr(4)
			require.EqualValues(t, engine.AUTH_TX, tr2.Status)
			for_testing.SimRequestToSberbank.SetFailRequest(false)
			err = DispatchTransaction(ctx, 3, ffsm.State(engine.ACCEPTED_TX))
			require.NoError(t, err)
			err = DispatchInvoice(ctx, 2, ffsm.State(engine.ACCEPTED_I))
			require.NoError(t, err)
			inv = for_testing.NoDbFromTest.GetInv(2)
			require.EqualValues(t, engine.AUTH_I, inv.Status)
			tr1 = for_testing.NoDbFromTest.GetTr(3)
			require.EqualValues(t, engine.ACCEPTED_TX, tr1.Status)
			tr2 = for_testing.NoDbFromTest.GetTr(4)
			require.EqualValues(t, engine.AUTH_TX, tr2.Status)
		})
		t.Run("SET-ACCEPTED_TX", func(t *testing.T) {
			err := DispatchTransaction(ctx, 4, ffsm.State(engine.ACCEPTED_TX))
			require.NoError(t, err)
			err = DispatchInvoice(ctx, 2, ffsm.State(engine.ACCEPTED_I))
			require.NoError(t, err)
			inv := for_testing.NoDbFromTest.GetInv(2)
			require.EqualValues(t, engine.ACCEPTED_I, inv.Status)
			tr1 := for_testing.NoDbFromTest.GetTr(3)
			require.EqualValues(t, engine.ACCEPTED_TX, tr1.Status)
			tr2 := for_testing.NoDbFromTest.GetTr(4)
			require.EqualValues(t, engine.ACCEPTED_TX, tr2.Status)
		})
	})
	t.Run("REJECTED", func(t *testing.T) {
		for_testing.NoDbFromTest = for_testing.NewNoDbFromTest()
		inv := for_testing.NoDbFromTest.GetInv(2)
		require.EqualValues(t, engine.DRAFT_I, inv.Status)
		tr1 := for_testing.NoDbFromTest.GetTr(3)
		require.EqualValues(t, engine.DRAFT_TX, tr1.Status)
		tr2 := for_testing.NoDbFromTest.GetTr(4)
		require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
		t.Run("SET-REJECTED_TX", func(t *testing.T) {
			err := DispatchTransaction(ctx, 3, ffsm.State(engine.REJECTED_TX))
			require.NoError(t, err)
			err = DispatchInvoice(ctx, 2, ffsm.State(engine.REJECTED_I))
			require.NoError(t, err)
			inv = for_testing.NoDbFromTest.GetInv(2)
			require.EqualValues(t, engine.DRAFT_I, inv.Status)
			tr1 = for_testing.NoDbFromTest.GetTr(3)
			require.EqualValues(t, engine.REJECTED_TX, tr1.Status)
			tr2 = for_testing.NoDbFromTest.GetTr(4)
			require.EqualValues(t, engine.DRAFT_TX, tr2.Status)
		})
		t.Run("SET-REJECTED_TX", func(t *testing.T) {
			err := DispatchTransaction(ctx, 4, ffsm.State(engine.REJECTED_TX))
			require.NoError(t, err)
			err = DispatchInvoice(ctx, 2, ffsm.State(engine.REJECTED_I))
			inv := for_testing.NoDbFromTest.GetInv(2)
			require.EqualValues(t, engine.REJECTED_TX, inv.Status)
			tr1 := for_testing.NoDbFromTest.GetTr(3)
			require.EqualValues(t, engine.REJECTED_TX, tr1.Status)
			tr2 := for_testing.NoDbFromTest.GetTr(4)
			require.EqualValues(t, engine.REJECTED_TX, tr2.Status)
			require.NoError(t, err)
		})
	})
}
