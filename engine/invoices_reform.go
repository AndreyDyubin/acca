// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package engine

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type invoiceTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("acca").
func (v *invoiceTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("invoices").
func (v *invoiceTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *invoiceTableType) Columns() []string {
	return []string{"invoice_id", "key", "status", "strategy", "meta", "payload", "updated_at", "created_at"}
}

// NewStruct makes a new struct for that view or table.
func (v *invoiceTableType) NewStruct() reform.Struct {
	return new(Invoice)
}

// NewRecord makes a new record for that table.
func (v *invoiceTableType) NewRecord() reform.Record {
	return new(Invoice)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *invoiceTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// InvoiceTable represents invoices view or table in SQL database.
var InvoiceTable = &invoiceTableType{
	s: parse.StructInfo{Type: "Invoice", SQLSchema: "acca", SQLName: "invoices", Fields: []parse.FieldInfo{{Name: "InvoiceID", Type: "int64", Column: "invoice_id"}, {Name: "Key", Type: "string", Column: "key"}, {Name: "Status", Type: "InvoiceStatus", Column: "status"}, {Name: "Strategy", Type: "string", Column: "strategy"}, {Name: "Meta", Type: "*[]uint8", Column: "meta"}, {Name: "Payload", Type: "*[]uint8", Column: "payload"}, {Name: "UpdatedAt", Type: "time.Time", Column: "updated_at"}, {Name: "CreatedAt", Type: "time.Time", Column: "created_at"}}, PKFieldIndex: 0},
	z: new(Invoice).Values(),
}

// String returns a string representation of this struct or record.
func (s Invoice) String() string {
	res := make([]string, 8)
	res[0] = "InvoiceID: " + reform.Inspect(s.InvoiceID, true)
	res[1] = "Key: " + reform.Inspect(s.Key, true)
	res[2] = "Status: " + reform.Inspect(s.Status, true)
	res[3] = "Strategy: " + reform.Inspect(s.Strategy, true)
	res[4] = "Meta: " + reform.Inspect(s.Meta, true)
	res[5] = "Payload: " + reform.Inspect(s.Payload, true)
	res[6] = "UpdatedAt: " + reform.Inspect(s.UpdatedAt, true)
	res[7] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Invoice) Values() []interface{} {
	return []interface{}{
		s.InvoiceID,
		s.Key,
		s.Status,
		s.Strategy,
		s.Meta,
		s.Payload,
		s.UpdatedAt,
		s.CreatedAt,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Invoice) Pointers() []interface{} {
	return []interface{}{
		&s.InvoiceID,
		&s.Key,
		&s.Status,
		&s.Strategy,
		&s.Meta,
		&s.Payload,
		&s.UpdatedAt,
		&s.CreatedAt,
	}
}

// View returns View object for that struct.
func (s *Invoice) View() reform.View {
	return InvoiceTable
}

// Table returns Table object for that record.
func (s *Invoice) Table() reform.Table {
	return InvoiceTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Invoice) PKValue() interface{} {
	return s.InvoiceID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Invoice) PKPointer() interface{} {
	return &s.InvoiceID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Invoice) HasPK() bool {
	return s.InvoiceID != InvoiceTable.z[InvoiceTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Invoice) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.InvoiceID = int64(i64)
	} else {
		s.InvoiceID = pk.(int64)
	}
}

// check interfaces
var (
	_ reform.View   = InvoiceTable
	_ reform.Struct = (*Invoice)(nil)
	_ reform.Table  = InvoiceTable
	_ reform.Record = (*Invoice)(nil)
	_ fmt.Stringer  = (*Invoice)(nil)
)

func init() {
	parse.AssertUpToDate(&InvoiceTable.s, new(Invoice))
}
