// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package engine

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type operationTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("acca").
func (v *operationTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("operations").
func (v *operationTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *operationTableType) Columns() []string {
	return []string{"oper_id", "tx_id", "invoice_id", "src_acc_id", "dst_acc_id", "hold", "hold_acc_id", "strategy", "amount", "key", "meta", "status", "updated_at", "created_at"}
}

// NewStruct makes a new struct for that view or table.
func (v *operationTableType) NewStruct() reform.Struct {
	return new(Operation)
}

// NewRecord makes a new record for that table.
func (v *operationTableType) NewRecord() reform.Record {
	return new(Operation)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *operationTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// OperationTable represents operations view or table in SQL database.
var OperationTable = &operationTableType{
	s: parse.StructInfo{Type: "Operation", SQLSchema: "acca", SQLName: "operations", Fields: []parse.FieldInfo{{Name: "OperationID", Type: "int64", Column: "oper_id"}, {Name: "TransactionID", Type: "int64", Column: "tx_id"}, {Name: "InvoiceID", Type: "int64", Column: "invoice_id"}, {Name: "SrcAccID", Type: "int64", Column: "src_acc_id"}, {Name: "DstAccID", Type: "int64", Column: "dst_acc_id"}, {Name: "Hold", Type: "bool", Column: "hold"}, {Name: "HoldAccID", Type: "*int64", Column: "hold_acc_id"}, {Name: "Strategy", Type: "OperationStrategy", Column: "strategy"}, {Name: "Amount", Type: "int64", Column: "amount"}, {Name: "Key", Type: "*string", Column: "key"}, {Name: "Meta", Type: "*[]uint8", Column: "meta"}, {Name: "Status", Type: "OperationStatus", Column: "status"}, {Name: "UpdatedAt", Type: "time.Time", Column: "updated_at"}, {Name: "CreatedAt", Type: "time.Time", Column: "created_at"}}, PKFieldIndex: 0},
	z: new(Operation).Values(),
}

// String returns a string representation of this struct or record.
func (s Operation) String() string {
	res := make([]string, 14)
	res[0] = "OperationID: " + reform.Inspect(s.OperationID, true)
	res[1] = "TransactionID: " + reform.Inspect(s.TransactionID, true)
	res[2] = "InvoiceID: " + reform.Inspect(s.InvoiceID, true)
	res[3] = "SrcAccID: " + reform.Inspect(s.SrcAccID, true)
	res[4] = "DstAccID: " + reform.Inspect(s.DstAccID, true)
	res[5] = "Hold: " + reform.Inspect(s.Hold, true)
	res[6] = "HoldAccID: " + reform.Inspect(s.HoldAccID, true)
	res[7] = "Strategy: " + reform.Inspect(s.Strategy, true)
	res[8] = "Amount: " + reform.Inspect(s.Amount, true)
	res[9] = "Key: " + reform.Inspect(s.Key, true)
	res[10] = "Meta: " + reform.Inspect(s.Meta, true)
	res[11] = "Status: " + reform.Inspect(s.Status, true)
	res[12] = "UpdatedAt: " + reform.Inspect(s.UpdatedAt, true)
	res[13] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Operation) Values() []interface{} {
	return []interface{}{
		s.OperationID,
		s.TransactionID,
		s.InvoiceID,
		s.SrcAccID,
		s.DstAccID,
		s.Hold,
		s.HoldAccID,
		s.Strategy,
		s.Amount,
		s.Key,
		s.Meta,
		s.Status,
		s.UpdatedAt,
		s.CreatedAt,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Operation) Pointers() []interface{} {
	return []interface{}{
		&s.OperationID,
		&s.TransactionID,
		&s.InvoiceID,
		&s.SrcAccID,
		&s.DstAccID,
		&s.Hold,
		&s.HoldAccID,
		&s.Strategy,
		&s.Amount,
		&s.Key,
		&s.Meta,
		&s.Status,
		&s.UpdatedAt,
		&s.CreatedAt,
	}
}

// View returns View object for that struct.
func (s *Operation) View() reform.View {
	return OperationTable
}

// Table returns Table object for that record.
func (s *Operation) Table() reform.Table {
	return OperationTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Operation) PKValue() interface{} {
	return s.OperationID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Operation) PKPointer() interface{} {
	return &s.OperationID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Operation) HasPK() bool {
	return s.OperationID != OperationTable.z[OperationTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Operation) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.OperationID = int64(i64)
	} else {
		s.OperationID = pk.(int64)
	}
}

// check interfaces
var (
	_ reform.View   = OperationTable
	_ reform.Struct = (*Operation)(nil)
	_ reform.Table  = OperationTable
	_ reform.Record = (*Operation)(nil)
	_ fmt.Stringer  = (*Operation)(nil)
)

func init() {
	parse.AssertUpToDate(&OperationTable.s, new(Operation))
}
