// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package engine

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type viewBalanceChangesViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("acca").
func (v *viewBalanceChangesViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("view_balance_changes").
func (v *viewBalanceChangesViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *viewBalanceChangesViewType) Columns() []string {
	return []string{"ch_id", "tx_id", "acc_id", "curr_id", "amount", "balance", "balance_accepted", "invoice", "transaction", "operations", "actual_account", "actual_transaction"}
}

// NewStruct makes a new struct for that view or table.
func (v *viewBalanceChangesViewType) NewStruct() reform.Struct {
	return new(ViewBalanceChanges)
}

// ViewBalanceChangesView represents view_balance_changes view or table in SQL database.
var ViewBalanceChangesView = &viewBalanceChangesViewType{
	s: parse.StructInfo{Type: "ViewBalanceChanges", SQLSchema: "acca", SQLName: "view_balance_changes", Fields: []parse.FieldInfo{{Name: "ChID", Type: "int64", Column: "ch_id"}, {Name: "TxID", Type: "int64", Column: "tx_id"}, {Name: "AccID", Type: "int64", Column: "acc_id"}, {Name: "CurrID", Type: "int64", Column: "curr_id"}, {Name: "Amount", Type: "int64", Column: "amount"}, {Name: "Balance", Type: "int64", Column: "balance"}, {Name: "BalanceAccepted", Type: "int64", Column: "balance_accepted"}, {Name: "Invoice", Type: "InvoiceFromBalanceChanges", Column: "invoice"}, {Name: "Transaction", Type: "TransactionFromBalanceChanges", Column: "transaction"}, {Name: "Operations", Type: "*Operations", Column: "operations"}, {Name: "Account", Type: "AccountFromBalanceChanges", Column: "actual_account"}, {Name: "ActualTransaction", Type: "TransactionFromBalanceChanges", Column: "actual_transaction"}}, PKFieldIndex: -1},
	z: new(ViewBalanceChanges).Values(),
}

// String returns a string representation of this struct or record.
func (s ViewBalanceChanges) String() string {
	res := make([]string, 12)
	res[0] = "ChID: " + reform.Inspect(s.ChID, true)
	res[1] = "TxID: " + reform.Inspect(s.TxID, true)
	res[2] = "AccID: " + reform.Inspect(s.AccID, true)
	res[3] = "CurrID: " + reform.Inspect(s.CurrID, true)
	res[4] = "Amount: " + reform.Inspect(s.Amount, true)
	res[5] = "Balance: " + reform.Inspect(s.Balance, true)
	res[6] = "BalanceAccepted: " + reform.Inspect(s.BalanceAccepted, true)
	res[7] = "Invoice: " + reform.Inspect(s.Invoice, true)
	res[8] = "Transaction: " + reform.Inspect(s.Transaction, true)
	res[9] = "Operations: " + reform.Inspect(s.Operations, true)
	res[10] = "Account: " + reform.Inspect(s.Account, true)
	res[11] = "ActualTransaction: " + reform.Inspect(s.ActualTransaction, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *ViewBalanceChanges) Values() []interface{} {
	return []interface{}{
		s.ChID,
		s.TxID,
		s.AccID,
		s.CurrID,
		s.Amount,
		s.Balance,
		s.BalanceAccepted,
		s.Invoice,
		s.Transaction,
		s.Operations,
		s.Account,
		s.ActualTransaction,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *ViewBalanceChanges) Pointers() []interface{} {
	return []interface{}{
		&s.ChID,
		&s.TxID,
		&s.AccID,
		&s.CurrID,
		&s.Amount,
		&s.Balance,
		&s.BalanceAccepted,
		&s.Invoice,
		&s.Transaction,
		&s.Operations,
		&s.Account,
		&s.ActualTransaction,
	}
}

// View returns View object for that struct.
func (s *ViewBalanceChanges) View() reform.View {
	return ViewBalanceChangesView
}

// check interfaces
var (
	_ reform.View   = ViewBalanceChangesView
	_ reform.Struct = (*ViewBalanceChanges)(nil)
	_ fmt.Stringer  = (*ViewBalanceChanges)(nil)
)

func init() {
	parse.AssertUpToDate(&ViewBalanceChangesView.s, new(ViewBalanceChanges))
}
