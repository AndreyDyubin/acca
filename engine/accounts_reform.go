// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package engine

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type currencyTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("acca").
func (v *currencyTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("currencies").
func (v *currencyTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *currencyTableType) Columns() []string {
	return []string{"curr_id", "key", "meta"}
}

// NewStruct makes a new struct for that view or table.
func (v *currencyTableType) NewStruct() reform.Struct {
	return new(Currency)
}

// NewRecord makes a new record for that table.
func (v *currencyTableType) NewRecord() reform.Record {
	return new(Currency)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *currencyTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// CurrencyTable represents currencies view or table in SQL database.
var CurrencyTable = &currencyTableType{
	s: parse.StructInfo{Type: "Currency", SQLSchema: "acca", SQLName: "currencies", Fields: []parse.FieldInfo{{Name: "CurrencyID", Type: "int64", Column: "curr_id"}, {Name: "Key", Type: "string", Column: "key"}, {Name: "Meta", Type: "*[]uint8", Column: "meta"}}, PKFieldIndex: 0},
	z: new(Currency).Values(),
}

// String returns a string representation of this struct or record.
func (s Currency) String() string {
	res := make([]string, 3)
	res[0] = "CurrencyID: " + reform.Inspect(s.CurrencyID, true)
	res[1] = "Key: " + reform.Inspect(s.Key, true)
	res[2] = "Meta: " + reform.Inspect(s.Meta, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Currency) Values() []interface{} {
	return []interface{}{
		s.CurrencyID,
		s.Key,
		s.Meta,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Currency) Pointers() []interface{} {
	return []interface{}{
		&s.CurrencyID,
		&s.Key,
		&s.Meta,
	}
}

// View returns View object for that struct.
func (s *Currency) View() reform.View {
	return CurrencyTable
}

// Table returns Table object for that record.
func (s *Currency) Table() reform.Table {
	return CurrencyTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Currency) PKValue() interface{} {
	return s.CurrencyID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Currency) PKPointer() interface{} {
	return &s.CurrencyID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Currency) HasPK() bool {
	return s.CurrencyID != CurrencyTable.z[CurrencyTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Currency) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.CurrencyID = int64(i64)
	} else {
		s.CurrencyID = pk.(int64)
	}
}

// check interfaces
var (
	_ reform.View   = CurrencyTable
	_ reform.Struct = (*Currency)(nil)
	_ reform.Table  = CurrencyTable
	_ reform.Record = (*Currency)(nil)
	_ fmt.Stringer  = (*Currency)(nil)
)

type accountTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("acca").
func (v *accountTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("accounts").
func (v *accountTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *accountTableType) Columns() []string {
	return []string{"acc_id", "curr_id", "key", "balance", "balance_accepted", "meta", "updated_at", "created_at"}
}

// NewStruct makes a new struct for that view or table.
func (v *accountTableType) NewStruct() reform.Struct {
	return new(Account)
}

// NewRecord makes a new record for that table.
func (v *accountTableType) NewRecord() reform.Record {
	return new(Account)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *accountTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// AccountTable represents accounts view or table in SQL database.
var AccountTable = &accountTableType{
	s: parse.StructInfo{Type: "Account", SQLSchema: "acca", SQLName: "accounts", Fields: []parse.FieldInfo{{Name: "AccountID", Type: "int64", Column: "acc_id"}, {Name: "CurrencyID", Type: "int64", Column: "curr_id"}, {Name: "Key", Type: "string", Column: "key"}, {Name: "Balance", Type: "int64", Column: "balance"}, {Name: "BalanceAccepted", Type: "int64", Column: "balance_accepted"}, {Name: "Meta", Type: "*[]uint8", Column: "meta"}, {Name: "UpdatedAt", Type: "time.Time", Column: "updated_at"}, {Name: "CreatedAt", Type: "time.Time", Column: "created_at"}}, PKFieldIndex: 0},
	z: new(Account).Values(),
}

// String returns a string representation of this struct or record.
func (s Account) String() string {
	res := make([]string, 8)
	res[0] = "AccountID: " + reform.Inspect(s.AccountID, true)
	res[1] = "CurrencyID: " + reform.Inspect(s.CurrencyID, true)
	res[2] = "Key: " + reform.Inspect(s.Key, true)
	res[3] = "Balance: " + reform.Inspect(s.Balance, true)
	res[4] = "BalanceAccepted: " + reform.Inspect(s.BalanceAccepted, true)
	res[5] = "Meta: " + reform.Inspect(s.Meta, true)
	res[6] = "UpdatedAt: " + reform.Inspect(s.UpdatedAt, true)
	res[7] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Account) Values() []interface{} {
	return []interface{}{
		s.AccountID,
		s.CurrencyID,
		s.Key,
		s.Balance,
		s.BalanceAccepted,
		s.Meta,
		s.UpdatedAt,
		s.CreatedAt,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Account) Pointers() []interface{} {
	return []interface{}{
		&s.AccountID,
		&s.CurrencyID,
		&s.Key,
		&s.Balance,
		&s.BalanceAccepted,
		&s.Meta,
		&s.UpdatedAt,
		&s.CreatedAt,
	}
}

// View returns View object for that struct.
func (s *Account) View() reform.View {
	return AccountTable
}

// Table returns Table object for that record.
func (s *Account) Table() reform.Table {
	return AccountTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Account) PKValue() interface{} {
	return s.AccountID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Account) PKPointer() interface{} {
	return &s.AccountID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Account) HasPK() bool {
	return s.AccountID != AccountTable.z[AccountTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Account) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.AccountID = int64(i64)
	} else {
		s.AccountID = pk.(int64)
	}
}

// check interfaces
var (
	_ reform.View   = AccountTable
	_ reform.Struct = (*Account)(nil)
	_ reform.Table  = AccountTable
	_ reform.Record = (*Account)(nil)
	_ fmt.Stringer  = (*Account)(nil)
)

func init() {
	parse.AssertUpToDate(&CurrencyTable.s, new(Currency))
	parse.AssertUpToDate(&AccountTable.s, new(Account))
}
